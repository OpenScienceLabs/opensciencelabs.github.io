[{"body":"","link":"https://osl-hugo.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://osl-hugo.github.io/blog/","section":"blog","tags":null,"title":"Blog"},{"body":"Una nube de palabras o wordcloud nos sirve para visualizar la frecuencia de palabras dentro de un texto. En este tutorial, usaremos el artículo de inteligencia artificial de Wikipedia para construir nuestra nube de palabras usando las bibliotecas tm y wordcloud.\nInstalación de pre-requisitos Para un mejor manejo de los paquetes, aquí vamos a utilizar la biblioteca pacman, esta nos permitirá hacer una instalación y activación de las bibliotecas de manera rápida. Recuerde instalar Rtools y la versión más reciente de R si está usando Windows.\n1# install.packages(\u0026#34;pacman\u0026#34;) # Si no tiene instalada la Biblioteca Pacman ejecutar esta línea de código 2library(\u0026#34;pacman\u0026#34;) Bibliotecas adicionales requeridas, instaladas y abiertas con pacman.\n1p_load(\u0026#34;tm\u0026#34;) # Biblioteca para realizar el preprocesado del texto, 2p_load(\u0026#34;tidyverse\u0026#34;) # Biblioteca con funciones para manipular datos. 3p_load(\u0026#34;wordcloud\u0026#34;) # Biblioteca para graficar nuestra nube de palabras. 4p_load(\u0026#34;RColorBrewer\u0026#34;) # Biblioteca para seleccionar una paleta de colores de nuestra nube de palabras. Importación del texto Para este ejemplo, descargamos nuestro artículo de formato texto de un repositorio, guardamos la dirección web en articulo_IA y lo descargamos usando la función read_file(). También puede usar los directorios locales para importar un texto de su preferencia. Si desea descargar el archivo que usamos en este ejemplo puede hacer hacerlo ejecutando download.file(\u0026quot;https://gist.github.com/EverVino/7bdbbe7ebdff5987970036f52f0e384f/raw/3a1997b6f9e3471555a941f8812ada0cef84977d/gistfile1.txt\u0026quot;, paste(getwd(),\u0026quot;/texto.txt\u0026quot;, sep=\u0026quot;\u0026quot;)) en la línea de comando de R, esto descargará el archivo y lo guardara en la carpeta de trabajo de R con el nombre de texto.txt.\nPara saber la carpeta de trabajo puede ejecutar getwd(). puede cambiar la carpeta de trabajo con la función setwd(\u0026quot;/nuevo_directorio_trabajo/\u0026quot;).\nLuego de importar el texto, vamos a convertirlo en un objeto tipo Source, esto facilitará la minería del texto y su posterior modificación.\n1articulo_IA \u0026lt;- \u0026#34;https://gist.github.com/EverVino/7bdbbe7ebdff5987970036f52f0e384f/raw/3a1997b6f9e3471555a941f8812ada0cef84977d/gistfile1.txt\u0026#34; 2texto \u0026lt;- read_file(articulo_IA)  read_file(dir): Función de la biblioteca tidyverse que nos permite importar archivos de texto. El resultado de la función es un vector de un sólo elemento. dir es la direción local o url con el nombre del archivo de formato txt a importar.  1texto \u0026lt;- VCorpus(VectorSource(texto), 2 readerControl = list(reader = readPlain, language = \u0026#34;es\u0026#34;))   VCorpus (x, readerControl(y)): Donde x es un objeto del tipo Source, se recomienda que sea un objeto del tipo VectorSource. Para readerControl(y) y es una lista de parámetros para leer x.\n  VectorSource(vector): Convierte una lista o vector a un objeto tipo VectorSource.\n  Preprocesado de texto Una vez importado el texto, tenemos que eliminar la palabras que actúan como conectores, separadores de palabras , de oraciones, y números que no aportarán al análisis del texto, para ello usamos la función tm_map() que nos permite aplicar funciones al texto del Corpus.\n1texto \u0026lt;- tm_map(texto, tolower) 2texto \u0026lt;- texto %\u0026gt;% 3 tm_map(removePunctuation) %\u0026gt;% 4 tm_map(removeNumbers) %\u0026gt;% 5 tm_map(removeWords, stopwords(\u0026#34;spanish\u0026#34;)) 6texto \u0026lt;- tm_map(texto, removeWords, c(\u0026#34;puede\u0026#34;, \u0026#34;ser\u0026#34;, \u0026#34;pues\u0026#34;, \u0026#34;si\u0026#34;, \u0026#34;aún\u0026#34;, \u0026#34;cómo\u0026#34;)) 7texto \u0026lt;- tm_map(texto, stripWhitespace)   tm_map(text, funcion_de_transformacion, parametros_de_funcion): Transforma el contenido de texto de un objeto Corpus o VCorpus, aplicando las funciones de transformación de texto.\n  tolower: Función de transformación de texto, usado para convertir todas la mayúsculas a minúsculas.\n  removeNumber: Función para eliminar los números del texto.\n  removeWord: Función para remover palabras,\n  stopword(\u0026quot;lang\u0026quot;): Lista de palabras conectoras en el lenguaje lang, es argumento de la función removeWord.\n  stripWhitespace: Función para remover los espacios blancos de un texto.\n  Nótese que usamos ambas notaciones para transformar el texto del Corpus, la notación normal tm_map(x, FUN) y también la notación de la biblioteca de tydiverse pipeoperator \u0026gt;%\u0026gt;, que toma como argumento inicial el resultado de la anterior función.\nSi quiere observar los cambios del texto puede ejecutar en la consola writeLines(as.character(texto[[1]])), esto imprimirá el resultado en la consola.\nConstruyendo la tabla de frecuencia 1texto \u0026lt;- tm_map(texto, PlainTextDocument)  PlainTextDocument: Convierte texto a un objeto tipo PlainTextDocument. Para el ejemplo, convierte un VCorpus a PlainTextDocument el cuál contiene metadatos y nombres de las filas, haciendo factible la conversión a un matriz.  1tabla_frecuencia \u0026lt;- DocumentTermMatrix(texto)  DocumentTermMatrix(texto): Convierte texto a un objeto tipo term-document matrix. Es un objeto que va a contener la frecuencia de palabras.  1tabla_frecuencia \u0026lt;- cbind(palabras = tabla_frecuencia$dimnames$Terms, 2 frecuencia = tabla_frecuencia$v) Extraemos los datos que nos interesan del objeto tabla_frecuencia y los juntamos con cbind().\nEjecutando en la consola View(tabla_frecuencia) notamos que es un objeto, para acceder a sus valores usamos el símbolo $ dicho de otra manera: para acceder a las palabras usamos tabla_frecuencia$dimnames$Terms y para su correspondientes frecuencia en el texto tabla_frecuencia$v.\n1# Convertimos los valores enlazados con cbind a un objeto dataframe. 2tabla_frecuencia\u0026lt;-as.data.frame(tabla_frecuencia) 3# Forzamos a que la columna de frecuencia contenga valores numéricos. 4tabla_frecuencia$frecuencia\u0026lt;-as.numeric(tabla_frecuencia$frecuencia) 5# Ordenamos muestra tabla de frecuencias de acuerdo a sus valores numéricos. 6tabla_frecuencia\u0026lt;-tabla_frecuencia[order(tabla_frecuencia$frecuencia, decreasing=TRUE),] Con estos últimos ajustes ya tenemos nuestra tabla de frecuencias para graficarla. Puede verificar los resultados ejecutando en la consola head(tabla_frecuencia)\nGraficando nuestra nube de palabras Una vez obtenida nuestra tabla de frecuencia sólo es necesario aplicar la función wordcloud().\n1wordcloud(words = tabla_frecuencia$palabras, 2 freq = tabla_frecuencia$frecuencia, 3 min.freq = 5, 4 max.words = 100, 5 random.order = FALSE, 6 colors = brewer.pal(8,\u0026#34;Paired\u0026#34;))      ","link":"https://osl-hugo.github.io/blog/nube-de-palabras/","section":"blog","tags":["nube de palabras","r","visualización de datos"],"title":"Crea tu nube de palabras en R a partir de un documento de texto"},{"body":"","link":"https://osl-hugo.github.io/tags/nube-de-palabras/","section":"tags","tags":null,"title":"nube de palabras"},{"body":"","link":"https://osl-hugo.github.io/tags/r/","section":"tags","tags":null,"title":"r"},{"body":"","link":"https://osl-hugo.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://osl-hugo.github.io/tags/visualizaci%C3%B3n-de-datos/","section":"tags","tags":null,"title":"visualización de datos"},{"body":"","link":"https://osl-hugo.github.io/tags/ciencia-de-datos/","section":"tags","tags":null,"title":"ciencia de datos"},{"body":"En este artículo, modificaremos la forma de nuestra tabla, combinando varias columnas en una sola o viceversa, usando la biblioteca tidyr con sus funciones gather(), spread(), separate(), y unite() con ejemplos.\nRequisitos Por comodidad usamos la biblioteca pacman como gestor de paquetes.\n1 2# install.packages(\u0026#34;pacman\u0026#34;) Para instalar la biblioteca pacman 3library(pacman) # Gestor de paquetes en R 4p_load(\u0026#34;readr\u0026#34;) # Biblioteca para importar archivos csv 5p_load(\u0026#34;tidyr\u0026#34;) # Biblioteca para manipular datos 6p_load(\u0026#34;ggplot2\u0026#34;) # Biblioteca para graficar datos 7p_load(\u0026#34;dplyr\u0026#34;) # Biblioteca para filtrar datos de la tabla 8p_load(\u0026#34;zoo\u0026#34;) # Biblioteca para transformar fechas a trimestres 9p_load(\u0026#34;scales\u0026#34;) # Biblioteca para dar formato de miles en el eje \u0026#34;y\u0026#34; 10 Recuerde, también puede instalar y abrir las bibliotecas de manera tradicional, por ejemplo con: install.packages(\u0026quot;tidyr\u0026quot;), luego abrir la misma biblioteca con library(tidyr).\nImportando nuestros datos La base de datos usada, ha sido descargada de La base de datos de Instituto de Estadística de Bolivia (INE). Descargada la base de datos se la modifica para que se encuentre en formato .csv y la importamos a nuestro entorno de R.\nPuede descargar los archivos usados en este artículo Repositorio de este artículo aquí.\nImportamos el archivo .csv a la variable datos_turistas.\n1 2covid_data \u0026lt;- read_csv(\u0026#34;turistas.csv\u0026#34;) 3 En la consola observamos lo siguiente:\n1 2Rows: 44 Columns: 169 3── Column specification ─────────────────────────────────────────────────────────────── 4Delimiter: \u0026#34;,\u0026#34; 5chr (1): Nacionalidad 6dbl (168): 31/01/08, 28/02/08, 31/03/08, 30/04/08, 31/05/08, 30/06/08, 31/07/08, 31... 7 8ℹ Use `spec()` to retrieve the full column specification for this data. 9ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 10 Nuestra tabla tiene varias columnas correspondientes al acumulativo por mes, si queremos graficar estos datos con ggplot() estos datos no nos van a ser de mucha utilidad. Por ello vamos a usar gather() para convertir las fechas de las columnas en datos de una sola columna.\nSi quiere explorar los datos manualmente puede ejecutar la función (View(datos_turistas)) en la consola.\nCómo usar la función gather() La función gather() puede agrupar los nombres de las columnas en una sola, así como se muestra en la siguiente animación.\n     En nuestro caso quremos hacer algo similar, agrupar las fechas en una columna llamada Fecha.\n1 2# A tibble: 6 × 169 3 Nacionalidad `31/01/08` `28/02/08` `31/03/08` `30/04/08` `31/05/08` `30/06/08` 4 \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; 51 Estados Unidos 2795 2365 2055 2258 2058 4141 62 Argentina 2304 1603 1780 869 2534 1293 73 Brasil 2996 3041 1499 3215 964 1128 84 Chile 1323 1195 1021 1115 754 1076 95 España 1050 875 721 727 744 670 106 Perú 1141 909 841 806 661 1438 11# … with 162 more variables … 12 Usando la función gather() tenemos:\n1 2datos_turistas \u0026lt;- 3 gather(data = datos_turistas, 4 key = Fecha, 5 value = Turistas, 6 2:ncol(datos_turistas)) 7 8# ncol(tabla) Devuelve el número de columnas de tabla 9 Ejecutando head(datos_turistas), notamos que hemos obtenido lo deseado.\n1 2# A tibble: 6 × 3 3 Nacionalidad Fecha Turistas 4 \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; 51 Estados Unidos 31/01/08 2795 62 Argentina 31/01/08 2304 73 Brasil 31/01/08 2996 84 Chile 31/01/08 1323 95 España 31/01/08 1050 106 Perú 31/01/08 1141 11 gather(data, key, value, ...)\nFunción que es usada para agrupar columnas en dos nuevas columnas.\n data : Dataframe o tabla que se va a modificar. key : Nombre de la nueva columna que va almacenar los nombres de la columnas que se van a agruparse. value : Nombre de la nueva columna que va contener los valores de la columnas que se van a agruparse. ... : Nombres o selección de columnas a agruparse, puede usar los nombres de las columnas con la función concatenar c(). Ejemplo c(nombre_col1, nombre_col2...) ó hacer la selección del complemento con !c(), también puede usar como referencia el número de columna. Para hacer referencia a una serie sucesiva use : Ejemplo: n_col1:n_col2.  Separa una columna con separate() Para ejemplificar el operador separate() vamos a separar la columna Fecha en las columnas día, mes y año.\n1 2datos_turistas \u0026lt;- 3 separate(datos_turistas, 4 col = Fecha, 5 into = c(\u0026#34;día\u0026#34;, \u0026#34;mes\u0026#34;, \u0026#34;año\u0026#34;), 6 sep = \u0026#34;/\u0026#34;, 7 remove = FALSE 8 ) 9 Podemos observar en la consola.\n1 2\u0026gt; head(datos_turistas) 3# A tibble: 6 × 6 4 Nacionalidad Fecha día mes año Turistas 5 \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; 61 Estados Unidos 31/01/08 31 01 08 2795 72 Argentina 31/01/08 31 01 08 2304 83 Brasil 31/01/08 31 01 08 2996 94 Chile 31/01/08 31 01 08 1323 105 España 31/01/08 31 01 08 1050 116 Perú 31/01/08 31 01 08 1141 12 separate(data, col, into, sep, remove)\nFunción que es usada para separar una columna en varias.\n data : Dataframe o tabla que se va a modificar. col : Nombre de la columna que va a separarse. into : Nombres de la nuevas columnas que van a crearse a partir de col. Puede usar para nombrar a las columnas la función concatenar c(). sep : Separador, un caracter que va a servir para identificar en donde se separa para generar las nuevas columnas. Puede usar Regular Expresions. remove : Acepta valores booleanos TRUE y FALSE, por defecto es TRUE, si es igual TRUE borra la columna que se separa, en FALSE la mantiene.  Vamos a aprovechar los nuevos datos generados, para graficar el top de turistas que han visitado Bolivia en los años 2016-2021.\nEn el código abajo usamos muchas funciones de la biblioteca dplyr si quiere aprender más sobre esa biblioteca puede leer este artículo.\n1 2# Añadimos \u0026#34;20\u0026#34; al año y lo convertimos a variable entera. 3datos_turistas$año \u0026lt;- 4 as.integer(paste(\u0026#34;20\u0026#34;, datos_turistas$año, sep = \u0026#34;\u0026#34;)) 5 6# Filtramos por año 7datos_turistas_2016_2021 \u0026lt;- 8 datos_turistas %\u0026gt;% 9 filter(as.integer(año) \u0026gt;= 2016, na.rm =TRUE) 10 11# Agrupando por Nacionalidad y año 12datos_turistas_2016_2021 \u0026lt;- 13 datos_turistas_2016_2021 %\u0026gt;% 14 group_by(Nacionalidad, año) %\u0026gt;% 15 summarise(turistas_anuales = sum(Turistas)) 16 17# Extrayendo los top turistas visitantes de Bolivia 18top_turistas_2016_2021 \u0026lt;- 19 datos_turistas_2016_2021 %\u0026gt;% 20 arrange(desc(turistas_anuales)) %\u0026gt;% 21 group_by(año) %\u0026gt;% 22 slice(1:7) 23 24# Graficando con ggplot2 25ggplot(data = top_turistas_2016_2021) + 26 geom_bar( 27 aes(x = año, y = turistas_anuales, fill = Nacionalidad), 28 stat = \u0026#34;identity\u0026#34;, 29 alpha = 0.8 30 ) + 31 theme_minimal() + scale_fill_brewer(palette = \u0026#34;Paired\u0026#34;) + 32 scale_x_continuous(breaks = c(2016:2021)) + 33 scale_y_continuous(labels = comma_format(big.mark = \u0026#34; \u0026#34;)) + 34 labs( 35 x = \u0026#34;\u0026#34;, 36 y = \u0026#34;\u0026#34;, 37 fill = \u0026#34;Nacionalidad\u0026#34;, 38 title = \u0026#34;Viajeros llegados por avión a Bolivia 2016-2021\u0026#34;, 39 subtitle = \u0026#34;Top 7 nacionalidades por año\u0026#34;, 40 caption = \u0026#34;Fuente: INE Bolivia\u0026#34; 41 ) 42      Función unite() Unite es una función complementaria a separate() y hace lo contrario, une las columnas en un sola. Vamos a usarlo para juntar las columnas de mes y año.\n1 2datos_turistas_trimestre \u0026lt;- 3 unite(datos_turistas, mes_año, c(\u0026#34;mes\u0026#34;,\u0026#34;año\u0026#34;), sep = \u0026#34;-\u0026#34;) 4 Observando en la consola:\n1 2\u0026gt; head(datos_turistas_trimestre) 3# A tibble: 6 × 5 4 Nacionalidad Fecha día mes_año Turistas 5 \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; 61 Estados Unidos 31/01/08 31 01-2008 2795 72 Argentina 31/01/08 31 01-2008 2304 83 Brasil 31/01/08 31 01-2008 2996 94 Chile 31/01/08 31 01-2008 1323 105 España 31/01/08 31 01-2008 1050 116 Perú 31/01/08 31 01-2008 1141 12 unite(data, col, ..., sep, remove)\nFunción que une varias columnas en una.\n data : Dataframe o tabla que se va a modificar. col : Nombre de la nueva columna que va a unir otras columnas. ...  : Nombres de la nuevas columnas que van a juntarse en col. Puede usar para nombrar las columnas la función concatenar c(). sep : Separador, un caracter que va a servir para unir los valores de las columnas que se unen. remove : Acepta valores booleanos TRUE y FALSE, por defecto es TRUE, si es igual TRUE borra la columnas que se unen, en FALSE las mantiene.  Función spread() Esta función es la que complementa a la función gather(), y hace exactamente lo contrario. esparcir una columna en varias.\nAntes de utilizar spread() vamos a agrupar nuestro datos en trimestres.\n1 2# Agrupamos los datos por trimestres 3datos_turistas_trimestre \u0026lt;- datos_turistas_trimestre %\u0026gt;% 4 mutate(trimestre = as.yearqtr(mes_año, format =\u0026#34;%m-%Y\u0026#34;)) %\u0026gt;% 5 group_by(Nacionalidad, trimestre) %\u0026gt;% 6 summarise(turistas_trimestre = sum(Turistas)) 7 8# También podemos utilizar la columna `Fecha` para transformar a trimestres, con el argumento `format=%d/%m/%y` 9 En la consola podemos ver\n1 2\u0026gt; head(datos_turistas_trimestre) 3# A tibble: 6 × 3 4# Groups: Nacionalidad [1] 5 Nacionalidad trimestre turistas_trimestre 6 \u0026lt;chr\u0026gt; \u0026lt;yearqtr\u0026gt; \u0026lt;dbl\u0026gt; 71 Alemania 2008 Q1 3318 82 Alemania 2008 Q2 1392 93 Alemania 2008 Q3 1458 104 Alemania 2008 Q4 1516 115 Alemania 2009 Q1 4008 126 Alemania 2009 Q2 1646 13 Ahora podemos usar spread(), para expandir los datos de la columna trimestre en columnas independientes.\n1 2# Mostar en columnas los valores de trimestre  3datos_turistas_trimestre \u0026lt;- 4 spread( 5 data = datos_turistas_trimestre, 6 key = trimestre, 7 value = turistas_trimestre) 8 Ahora observamos que nuestros datos se han esparcido, este formato es útil para visualización de datos en otros frameworks.\n1 2\u0026gt; head(datos_turistas_trimestre) 3# A tibble: 6 × 57 4# Groups: Nacionalidad [6] 5 Nacionalidad `2008 Q1` `2008 Q2` `2008 Q3` `2008 Q4` `2009 Q1` `2009 Q2` `2009 Q3` 6 \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; 71 Alemania 3318 1392 1458 1516 4008 1646 1924 82 Argentina 5687 4696 8537 6884 4734 4667 5810 93 Australia 988 1269 944 1384 980 771 1253 104 Austria 587 176 221 300 632 206 293 115 Bélgica 1029 246 784 602 1504 556 531 126 Brasil 7536 5307 7199 5693 4178 5941 9843 13# … with 49 more variables … 14 spread(data, key, value)\nFunción que es usada para esparcir los datos de una columna como nombres de columnas.\n data : Dataframe o tabla que se va a modificar. key : Nombre de la columna cuyos valores se van esparcir como los nombres de la nuevas columnas. value : Nombre de la columna cuyos valores van a convertirse en los nuevos valores de las nuevas columnas.  Aprovechemos estos datos para graficar los top países que han visitado Bolivia en el primer trimestre del 2019.\n1 2top_turistas_trimestre_1_2019 \u0026lt;- 3 datos_turistas_trimestre %\u0026gt;% 4 select(Nacionalidad, `2019 Q1`) %\u0026gt;% 5 rename(trimestre1_2019= `2019 Q1`) %\u0026gt;% 6 arrange(desc(trimestre1_2019)) %\u0026gt;% as.data.frame() %\u0026gt;% 7 slice_head(n = 10) 8 Graficando\n1 2ggplot(data = top_turistas_trimestre_1_2019) + 3 geom_bar(aes(x=Nacionalidad, y=trimestre1_2019, fill=Nacionalidad), stat=\u0026#34;identity\u0026#34;, alpha = 0.8)+ 4 theme_minimal() + scale_fill_brewer(palette = \u0026#34;Paired\u0026#34;)+ 5 scale_y_continuous(labels = comma_format(big.mark=\u0026#34; \u0026#34;)) + 6 labs( 7 x = \u0026#34;\u0026#34;, 8 y = \u0026#34;\u0026#34;, 9 fill = \u0026#34;Nacionalidad\u0026#34;, 10 title = \u0026#34;Viajeros llegados por avión a Bolivia Primer Trimestre 2019\u0026#34;, 11 subtitle = \u0026#34;Top 10 nacionalidades\u0026#34;, 12 caption = \u0026#34;Fuente: INE Bolivia\u0026#34; 13 ) 14#p_unload(all) #Ejecute esta línea de comando para cerrar las bibliotecas abiertas con \u0026#34;pacman\u0026#34; 15      Outro Las funciones mostradas en el árticulo son las más usadas y permiten una mejor manipulación de datos en R. Como siempre es bueno revisar la documentación oficial si se quiere aprender más.\nPuede descargar el repositorio de este artículo aquí.\nReferencias   Git Hub Issues tidyr\n  Instituto de Estadística de Bolivia (INE)\n  Documentación de R\n  ","link":"https://osl-hugo.github.io/blog/reorganiza-tus-tablas-con-tidyr/","section":"blog","tags":["r","tratamiento de datos","ciencia de datos"],"title":"Reorganiza tu tabla con tidyr en R"},{"body":"","link":"https://osl-hugo.github.io/tags/tratamiento-de-datos/","section":"tags","tags":null,"title":"tratamiento de datos"},{"body":"En este artículo mostraremos como usar algunas funciones importantes de la biblioteca de dplyr, específicamente veremos como usar las funciones filter(), select(), group_by(), sumarize() y mutate() dentro de un ejemplo práctico.\nRequisitos Por comodidad usamos la biblioteca pacman como gestor de paquetes.\n1# install.packages(\u0026#34;pacman\u0026#34;) Para instalar la biblioteca pacman 2library(pacman) # Gestor de paquetes en R 3p_load(\u0026#34;readr\u0026#34;) # Biblioteca para importar archivos csv 4p_load(\u0026#34;dplyr\u0026#34;) # Biblioteca para manipular datos 5p_load(\u0026#34;ggplot2\u0026#34;) # Biblioteca para graficar datos 6 Recuerde, que tambien puede instalar y abrir las bibliotecas de manera tradicional, por ejemplo con: install.packages(\u0026quot;readr\u0026quot;), luego abrir la misma biblioteca con library(readr).\nImportando nuestros datos La base de datos usada ha sido descargada de Our World In Data, la cual muestra los datos recolectados de la reciente pandemia. Una vez descargada nuestra base de datos en formato .csv, la importamos a nuestro entorno de R. Puede descargar los archivos usados en este artículo Repositorio de este artículo aquí.\nImportamos los el archivo .csv a la variable covid_data.\n1covid_data \u0026lt;- read_csv(\u0026#34;owid-covid-data.csv\u0026#34;) En la consola observamos lo siguiente:\n1Rows: 193573 Columns: 67 2── Column specification ──────────────────────────────────────────────────────────────────────────── 3Delimiter: \u0026#34;,\u0026#34; 4chr (4): iso_code, continent, location, tests_units 5dbl (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_deaths, new_deaths_smoo... 6date (1): date 7 8ℹ Use `spec()` to retrieve the full column specification for this data. 9ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Como puede ver esta tabla es muy extensa, contiene 67 columnas (variables) y 193573 filas, manejar los datos directamente de esta tabla puede ser complicado, por lo que se recomienda reducir las variables o extraer información relevante para nosotros. Si quiere explorar los datos manualmente puede ejecutar la función (View(datos_covid)) en la consola.\nCómo usar la función filter() y select() Queremos ver los datos de la región de Sudamérica (continent = \u0026quot;South America\u0026quot;) y sólo las variables de país, fecha y nuevos casos que corresponderían a las columnas de location, date, new_cases respectivamente en el dataframe datos_covid (para graficar curvas suaves usamos la columna new_cases_smoothed en vez de new_cases).\nUsando la función filter() y tenemos:\n1# Filtramos los las filas que cumplan con la condición de que en su columna continent sea igual a \u0026#34;South America\u0026#34;. 2# Almacenamos lo deseado en la variable covid_sudamerica 3covid_sudamerica \u0026lt;- filter(covid_data, continent == \u0026#34;South America\u0026#34;) 4# Filtramos las filas que no contengan valores en la columna de new_cases_smoothed, es decir valores iguales a NA. 5covid_sudamerica \u0026lt;- filter(covid_sudamerica, !is.na(new_cases_smoothed)) 6# Seleccionamos sólo las columnas que nos importan 7covid_sudamerica \u0026lt;- select(covid_sudamerica, location, date, new_cases_smoothed) filter(tabla, condicion)\nFunción que es usada para filtrar en filas, selecciona un subconjunto de filas que cumplan con la condicion\n tabla : Dataframe o tabla de donde va se va a filtrar datos. condicion : Prueba lógica que devuelve valores booleanos TRUE o FALSE, de esta condicion depende si la fila se incluye en la nueva tabla.  Para armar la condicion, puede usar los nombres de la columna como variables y usar los siguientes operadores lógicos:\n \u0026gt; : Corresponde a mayor que. == : Corresponde a igual que. \u0026gt;= : Corresponde a mayor o igual que. \u0026lt;= : Corresponde a menor o igual que. != : Corresponde a diferente que.  Puede combinarlas las condiciones con:\n \u0026amp; : Operador AND. | : Operador OR. ! : Operador NOT o negación. is.na(x) : Función que verifica si un dato es NA (Not Available/ Missing value), valor faltante o no disponible. Devuelve TRUE cuando x es NA. valor %in% vector : Operador que verifica si un valor existe en un vector. Devuelve TRUE cuando valor esta incluido en vector.  select(tabla, nombre_col, ...) Función que filtra columnas por nombre de columna para un nueva tabla.\n tabla : Dataframe o tabla de donde va se va a filtrar datos. nombre_col : Nombre de la columna o variable que va a componer la nueva tabla.  Operador Pipe %\u0026gt;% Este operador nos permite combinar muchas operaciones en una sóla línea, una simple cadena de comandos. Considere lo siguiente para entender el flujo de datos del operador Pipe %\u0026gt;%.\n Tome x use x como entrada para la función f(x) use la salida de f(x) como entrada de la función g(x) use la salida de g(x) como entrada de la función h(x).  Simplificando tenemos h(g(f(x))) , esta es una expresión complicada para escribirla, su equivalente usando el operador Pipe (%\u0026gt;%) es: x %\u0026gt;% f() %\u0026gt;% g() %\u0026gt;% h() que es mucho más entendible y fácil de escribir.\nUsando el operador %\u0026gt;% podemos simplificar a una línea de comando encadenada, la obtención de nuestra variable covid_sudamerica de la sección anterior\n1covid_sudamerica \u0026lt;- 2 covid_data %\u0026gt;% 3 filter(continent == \u0026#34;South America\u0026#34; \u0026amp; !is.na(new_cases_smoothed)) %\u0026gt;% 4 select(location, date, new_cases_smoothed) Para poder graficar este ejemplo lo vamos a reducir un poco más, obteniendo una tabla que sólo contenga países de la región.\n1paises_andinos = c(\u0026#34;Bolivia\u0026#34;, \u0026#34;Peru\u0026#34;, \u0026#34;Chile\u0026#34;, \u0026#34;Ecuador\u0026#34;) 2covid_paises_region \u0026lt;- 3 covid_data %\u0026gt;% 4 filter(location %in% paises_andinos) %\u0026gt;% 5 select(location, date, new_cases_smoothed) Para observar nuestros datos obtenidos graficamos\n1ggplot(covid_paises_region) + 2geom_line(aes(x = date, y = new_cases_smoothed, color = location), size = 0.5) + 3 scale_color_brewer(palette = \u0026#34;Set1\u0026#34;) + theme_bw() + 4 labs( 5 x = \u0026#34;\u0026#34;, 6 y = \u0026#34;\u0026#34;, 7 title = \u0026#34;Registro de contagios diario en países de la región por COVID-19\u0026#34;, 8 subtitle = \u0026#34;(Datos suavizados)\u0026#34;, 9 caption = \u0026#34;Fuente: Our World In Data\u0026#34;, 10 color = \u0026#34;Países\u0026#34; 11 ) 12      Cómo usar summarise() y group_by() Si, queremos saber el total de contagiados y el total de días desde que se registraron los contagios podemos usar summarize()\n1summarise( 2 covid_paises_region, 3 total = sum(new_cases_smoothed, na.rm = TRUE), 4 dias = n_distinct(date) 5) Ejecutanto obtenemos en la consola:\n1# A tibble: 1 × 2 2 total dias 3 \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; 41 9174748. 841 summarise(tabla, nueva_columa = funcion_vector(columna_tabla), ...) Función que crea una nueva tabla a partir de la agrupación de columnas de una tabla anterior, los valores de la nueva columna dependen también del tipo de función vector que se use para agruparlas.\n tabla: Dataframe o tabla de donde sus columnas servirán para contruir la nueva tabla. nueva_columna: nueva columna o variable creada a partir de las anteriores columnas. funcion_vector(): función que devuelve un solo valor a partir de un vector.  Algunas funciones que se pueden usar como función vector son:\n sum(vector) : Devuelte la suma de los componentes de vector. mean(vector) : Devuelve el valor promedio de los valores de vector. min(vector) : Devuelve el valor mínimo de los valores de vector. max(vector) : Devuelve el valor mínimo de los valores de vector. n_distinc(vector) : Devuelve el conteo de los valores diferentes dentro de vector. n(vector) : Devuelve el conteo de los valores dentro de vector. sd(vector) : Devuelve la desviación estandar de los valores de vector.  Todas las funciones tienen la opción ra.rm para omitir o pasar por alto los valores que sean NA (No Applicable/Missing values) durante los cálculos, por ejemplo puede usar mean(vector, na.rm = TRUE) para calcular el promedio de vector descartando los datos que sean NA.\nLa función summarise() agrupa todos los datos de una columna, y devuelve un sólo valor por columna.\nPara el ejemplo, si quisieramos no obtener el total sino el total por países usamos la función group_by().\n1total_covid_paises_region \u0026lt;- 2 covid_paises_region %\u0026gt;% group_by(location) %\u0026gt;% 3 summarise(total_contagios = sum(new_cases_smoothed, na.rm = TRUE)) 4 5total_covid_paises_region Ejecutando, observamos en la consola:\n1# A tibble: 4 × 2 2 location total_contagios 3 \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; 41 Bolivia 911503. 52 Chile 3785492. 63 Ecuador 889635. 74 Peru 3588117. Nota: estos son resultados de datos suavizados\ngroup_by(tabla, columna_1, columna_2 ...) Agrupa varias filas en una sola, las agrupa si y sólo si tienen el mismo valor en columna_1, luego las agrupa por valores en la columna_2 y así sucesivamente. Esta función siempre va acompañada de la función summarise()\n tabla: Dataframe o tabla de donde sus columnas servirán para contruir la nueva tabla. columna_n: nombre la columna de la cual se van a agrupar los valores con la función summarise().  Hagamos algo más interesante, queremos ver la evolución del contagios de COVID-19 por continentes.\n1covid_continentes \u0026lt;- 2 covid_data %\u0026gt;% 3 group_by(continent, date) %\u0026gt;% 4 summarise(total_contagios = sum(new_cases_smoothed, na.rm = TRUE)) %\u0026gt;% 5 filter(!is.na(continent)) Graficando los resultados\n1ggplot(covid_continentes) + 2 geom_line(aes(x = date, y = total_contagios, color = continent), size = 0.8) + 3 scale_color_brewer(palette = \u0026#34;Set1\u0026#34;) + theme_bw() + 4 labs( 5 x = \u0026#34;\u0026#34;, 6 y = \u0026#34;\u0026#34;, 7 title = \u0026#34;Registro de contagios COVID-19 por Continente\u0026#34;, 8 subtitle = \u0026#34;(Datos suavizados)\u0026#34;, 9 caption = \u0026#34;Fuente: Our World In Data\u0026#34;, 10 color = \u0026#34;Continente\u0026#34; 11 )      Para que sirve la función mutate() Una buen indicador, para saber si hemos mejorado el tratamiento y prevención contra la COVID-19 es hallar la relación entre el muertes por cada 1000 contagiados (mientras menor valor tenga la variable, mejor estamos preparados para afrontar la COVID). Llamemos a esta nueva variable indicador, esta dependera de otras para su cálculo, la función mutate() no ayudará a calcularla.\nPuede que no sea excelente indicador y que no refleje muy bien lo que se quiere, pero para propositos de este ejemplo nos servirá\n1# Obtenemos nuestros datos que nos van a ayudar a calcular el indicador 2# Filtramos los valores que sean iguales a 0 y los datos NA con filter() 3covid_continentes_indicador \u0026lt;- 4 covid_data %\u0026gt;% 5 group_by(continent, date) %\u0026gt;% 6 summarise(nuevos_casos = sum(new_cases_smoothed, na.rm = TRUE), nuevas_muertes = sum(new_deaths_smoothed, na.rm = TRUE)) %\u0026gt;% 7 filter(!is.na(continent) \u0026amp; nuevos_casos != 0 \u0026amp; nuevas_muertes != 0) Usamos la función mutate para obtener nuestro indicador\n1covid_continentes_indicador \u0026lt;- 2 covid_continentes_indicador %\u0026gt;% 3 mutate(indicador = nuevas_muertes/nuevos_casos*1000) mutate(tabla, nueva_columna_1 = f(columna_1, columna_2...), nueva_columna_2 = f(columna_n, ...)... ) Crea una nuevas columnas las modifica a partir de los datos de otras columnas.\n tabla : Dataframe o tabla de donde sus columnas servirán para obtener la nueva tabla. nueva_columna_n : Nombre la nueva columna que se crea a partir de otras columnas. columna_n : Nombre la columna o variable de la tabla. f(columna_1, columna_2, ...) : Representa la combinación algebraica de las variables que van a devolver el nuevos valores de la nueva_columna_n. (Observe que usamos nombre de la columna y variable como sinónimos)  Mostrando los resultados en una gráfica\n1ggplot(covid_continentes_indicador) + 2 geom_line(aes(x = date, y = indicador, color = continent), size = 0.8) + 3 scale_color_brewer(palette = \u0026#34;Dark2\u0026#34;) + theme_bw() + 4 labs( 5 x = \u0026#34;\u0026#34;, 6 y = \u0026#34;\u0026#34;, 7 title = \u0026#34;Relación diaria de (muertes)/(1000 contagiados) COVID-19\u0026#34;, 8 subtitle = \u0026#34;(Datos suavizados)\u0026#34;, 9 caption = \u0026#34;Fuente: Our World In Data\u0026#34;, 10 color = \u0026#34;Continente\u0026#34; 11 )      Conclusiones Las funciones mostradas en el árticulo son las más usadas y permiten una mejor manipulación de datos en R. Como siempre es bueno revisar la documentación oficial de los correspondientes paquetes si se quiere aprender más.\nPuede descargar el repositorio de este artículo aquí.\nReferencias Our World In Data\nDocumentacion de R\n","link":"https://osl-hugo.github.io/blog/art-filtrar-datos/","section":"blog","tags":["r","maps","filtrado de datos","dplyr","ciencia de datos"],"title":"Cómo filtrar datos de tu tabla con dplyr en R"},{"body":"","link":"https://osl-hugo.github.io/tags/dplyr/","section":"tags","tags":null,"title":"dplyr"},{"body":"","link":"https://osl-hugo.github.io/tags/filtrado-de-datos/","section":"tags","tags":null,"title":"filtrado de datos"},{"body":"","link":"https://osl-hugo.github.io/tags/maps/","section":"tags","tags":null,"title":"maps"},{"body":"The Open Science Labs Guideline is a collection of documents about how to get started in specific areas. Articles In this section, there are the guideline about how to write the blog posts for Open Science Labs. OSL Blogs can be accessed at: https://opensciencelabs.org/blog/.\n Versión en Español  Versão em Português  -- Diversity, Equity and Inclusion (DEI) Open Science Labs (OSL) is a community that offers an open space to share, learn and teach topics related to Open Science and Computational Technologies to people from Latin America or any part of the world.\nDEI is a very important aspect of our community and we really care about that.\nIn this section we can find our initial DEI declaration.\n Versión en Español  DevOps In this section, we have the documentation about all our infrastucture (work in progress), and our goal is to have the necessary information for anyone who wants to help us in the DevOps tasks.\nDiscord  English Version  Fund Raiser In the section, we are gathering all the information and investigation results about grants, institutes, fiscal sponsors, etc that can help us to decide the fund raising activities and help other communities as well.\nDocuments in Spanish:\n Guía para Recaudación de Fondos Posibles instituciones para aplicar por una subvención NumFOCUS como patrocinador fiscal  Mentoring In this section, there are documents about Open Science Labs Mentoring program. The mentoring could be running as a community mentoring, where someone from the community for the mentoring program and Open Science Labs tries to find one mentor inside our community, using discord, or using the social media, in order to reach someone outside.\nAnother way that the mentoring can happen is inside the internship program.\nDocuments in Spanish:\n Guía de Mentorías Código de Conducta Google Summer of Code  Documents in English:\n Mentoring Guideline Code of Conduct  Marketing In this section, we have some materials researched that maybe could be useful for other communities or for OSL in the future.\n Open Collective  Roadmap If you are interested in the Open Science Labs next steps, please check our Roadmap.\nGovernance For more information about our project governance, please check governance document.\nVersión en Español  -- ","link":"https://osl-hugo.github.io/guidelines/","section":"guidelines","tags":null,"title":""},{"body":"","link":"https://osl-hugo.github.io/tags/gobernance/","section":"tags","tags":null,"title":"gobernance"},{"body":"","link":"https://osl-hugo.github.io/tags/mentor%C3%ADas/","section":"tags","tags":null,"title":"mentorías"},{"body":"The objectives of this document include formalizing the governance of the Open Science Labs (OSL) project. In both common and uncommon situations, outlining the decision-making procedure and the interactions between the various members of our community, including the relationship between work that may be supported by for-profit or nonprofit organizations and open source collaborative development.\nSummary OSL is a community-owned and community-run project. To the maximum extent possible, decisions about project direction are made by community consensus (but note that \u0026quot;consensus\u0026quot; here has a somewhat technical meaning that might not match everyone's expectations -- see below). Some members of the community additionally contribute by serving on the OSL (Eunice Rodas, Ever Vino, Ivan Ogasawara, Luis Casas), where they are responsible for facilitating the establishment of community consensus, for stewarding project resources, and -- in extreme cases -- for making project decisions if the normal community-based process breaks down.\nCommonly, everyone is responsible for specific areas or tasks and, if there is anything that needs to be decided by the group, this person brings this topic to one of our contributor's meetings and we can discuss and decide that together. The main criteria we have that should be respected is that the content should be related to an \u0026quot;open\u0026quot; topic (private technologies are not allowed, for example), and the access to that information should also be open (references to private content is not allowed neither). So, we try to have an open space for everyone to bring their ideas and have also the space to implement that idea as well, the steering council first main goal is to help contributors to share their ideas before to put it in practice.\nThe project Open Science Labs (OSL) is a community that aims to join people from all parts of the world, specially from Latin America countries and create an open space for teaching, learning and sharing topics around open science and open computational tools.\nOSL also motivates initiatives about English language because it increases the possibilities of collaboration in open projects across the world.\nThe software developed by OSL initiatives are released under some OSI approved license (such as BSD, Apache 2.0, or MIT), built openly and hosted on public GitHub repositories under the OpenScienceLabs organization.\nThe Project is conducted by a distributed team of contributors, who are individuals that have collaborated with code, documentation, graphical design or other kind of work to the Project. Anyone can be a Contributor. Contributors can be affiliated with any legal entity or none. Contributors participate in the project by submitting, reviewing and discussing GitHub pull requests and issues and participating in open and public Project discussions on GitHub, discord, among other channels. The basis of project participation is openness and transparency.\nThe Project Community consists of all Contributors and Users of the Project. Contributors work on behalf of and are responsible to the larger Project Community and we strive to keep the barrier between Contributors and Users as low as possible.\nIn order to improve transparency and a better fiscal workflow, OSL is currently looking for a fiscal sponsor to help our project to grow.\nGovernance This section describes the governance and leadership model of The Project.\nThe principles of Project governance are:\nOpenness \u0026amp; Transparency Active Contribution Institutional Neutrality Diversity, Equity and Inclusion Education  Consensus-based decision making by the community In general, all project decisions will be made by consensus of all interested Contributors. The primary goal of this approach is to ensure that the people who are most affected by and involved in any given change can contribute their knowledge in the confidence that their voices will be heard, because thoughtful review from a broad community is the best mechanism we know of for creating high-quality software.\nThe mechanism we use to accomplish this goal may be unfamiliar for those who are not experienced with the cultural norms around free/open-source software development. We provide a summary here, and highly recommend that all Contributors additionally read Chapter 4: Social and Political Infrastructure of Karl Fogel's classic Producing Open Source Software, and in particular the section on Consensus-based Democracy, for a more detailed discussion.\nIn this context, consensus does NOT require:\n that we wait to solicit everybody's opinion on every change, that we ever hold a vote on anything, or that everybody is happy or agrees with every decision.  For us, what consensus means is that we entrust everyone with the right to veto any change if they feel it necessary. While this may sound like a recipe for obstruction and pain, this is not what happens. Instead, we find that most people take this responsibility seriously, and only invoke their veto when they judge that a serious problem is being ignored, and that their veto is necessary to protect the project. And in practice, it turns out that such vetoes are almost never formally invoked, because their mere possibility ensures that Contributors are motivated from the start to find some solution that everyone can live with -- thus accomplishing our goal of ensuring that all interested perspectives are taken into account.\nHow do we know when consensus has been achieved? First of all, this is rather difficult since consensus is defined by the absence of vetos, which requires us to somehow prove a negative. In practice, we use a combination of our best judgement (e.g., a simple and uncontroversial bug fix posted on GitHub and reviewed by a core developer is probably fine) and best efforts (e.g., all substantive API changes must be posted to a github issue or a discussion on discord in order to give the broader community a chance to catch any problems and suggest improvements; we assume that anyone who cares enough about OSL to invoke their veto right should be on the github OSL repositories or discord). OSL, is a small group, and aims for quick and transparent communication, so the common channels for communication are the github issues and the discord channels. So, all people involved can have a quick and transparent communication about any specific problem and we can react very quick.\nIf one does need to invoke a formal veto, then the process should consist of:\n an unambiguous statement that a veto is being invoked, an explanation of why it is being invoked, and a description of what conditions (if any) would convince the vetoer to withdraw their veto.  If all proposals for resolving some issue are vetoed, then the status quo wins by default.\nIn the worst case, if a Contributor is genuinely misusing their veto obstructively to the detriment of the project, then they can be ejected from the project by consensus of the Steering Council -- see below.\nSteering Council The Project will have a Steering Council that consists of Project Contributors who have produced contributions that are substantial in quality and quantity, and sustained over at least one year. The overall role of the Council is to ensure, with input from the Community, the long-term well-being of the project, both technically and as a community.\nDuring the everyday project activities, council members participate in all discussions, code review and other project activities as peers with all other Contributors and the Community. In these everyday activities, Council Members do not have any special power or privilege through their membership on the Council. However, it is expected that because of the quality and quantity of their contributions and their expert knowledge of the Project Software and Services that Council Members will provide useful guidance, both technical and in terms of project direction, to potentially less experienced contributors.\nThe Steering Council and its Members play a special role in certain situations. In particular, the Council may, if necessary:\n Make decisions about the overall scope, vision and direction of the project. Make decisions about strategic collaborations with other organizations or individuals. Make decisions about specific technical issues, features, bugs and pull requests. They are the primary mechanism of guiding the code review process and merging pull requests. Make decisions about the Services that are run by The Project and manage those Services for the benefit of the Project and Community. Update policy documents such as this one. Make decisions when regular community discussion doesn’t produce consensus on an issue in a reasonable time frame.  However, the Council's primary responsibility is to facilitate the ordinary community-based decision making procedure described above. If we ever have to step in and formally override the community for the health of the Project, then we will do so, but we will consider reaching this point to indicate a failure in our leadership.\nCouncil decision making If it becomes necessary for the Steering Council to produce a formal decision, then they will use a form of the Apache Foundation voting process. This is a formalized version of consensus, in which +1 votes indicate agreement, -1 votes are vetoes (and must be accompanied with a rationale, as above), and one can also vote fractionally (e.g. -0.5, +0.5) if one wishes to express an opinion without registering a full veto. These numeric votes are also often used informally as a way of getting a general sense of people's feelings on some issue, and should not normally be taken as formal votes. A formal vote only occurs if explicitly declared, and if this does occur then the vote should be held open for long enough to give all interested Council Members a chance to respond -- at least one week.\nIn practice, we anticipate that for most Steering Council decisions (e.g., voting in new members) a more informal process will suffice.\nCouncil membership A list of current Steering Council Members is maintained at the page About.\nTo become eligible to join the Steering Council, an individual must be a Project Contributor who has produced contributions that are substantial in quality and quantity, and sustained over at least six month. Potential Council Members are nominated by existing Council members, and become members following consensus of the existing Council members, and confirmation that the potential Member is interested and willing to serve in that capacity. The Council will be initially formed from the set of existing Core Developers who, as of late 2015, have been significantly active over the last year.\nWhen considering potential Members, the Council will look at candidates with a comprehensive view of their contributions. This will include but is not limited to code, code review, infrastructure work, mailing list and chat participation, community help/building, education and outreach, design work, etc. We are deliberately not setting arbitrary quantitative metrics (like “100 commits in this repo”) to avoid encouraging behavior that plays to the metrics rather than the project’s overall well-being. We want to encourage a diverse array of backgrounds, viewpoints and talents in our team, which is why we explicitly do not define code as the sole metric on which council membership will be evaluated.\nIf a Council member becomes inactive in the project for a period of six month, they will be considered for removal from the Council. Before removal, inactive Member will be approached to see if they plan on returning to active participation. If not they will be removed immediately upon a Council vote. If they plan on returning to active participation soon, they will be given a grace period of one month. If they don’t return to active participation within that time period they will be removed by vote of the Council without further grace period. All former Council members can be considered for membership again at any time in the future, like any other Project Contributor. Retired Council members will be listed on the project website, acknowledging the period during which they were active in the Council.\nThe Council reserves the right to eject current Members, if they are deemed to be actively harmful to the project’s well-being, and attempts at communication and conflict resolution have failed. This requires the consensus of the remaining Members.\nConflict of interest It is expected that the Council Members will be employed at a wide range of companies, universities and non-profit organizations. Because of this, it is possible that Members will have conflict of interests, such ones include, but are not limited to:\n Financial interests, such as investments, employment or contracting work, outside of The Project that may influence their work on The Project. Access to proprietary information of their employer that could potentially leak into their work with the Project.  All members of the Council shall disclose to the rest of the Council any conflict of interest they may have. Members with a conflict of interest in a particular issue may participate in Council discussions on that issue, but must recuse themselves from voting on the issue.\nPrivate communications of the Council To the maximum extent possible, Council discussions and activities will be public and done in collaboration and discussion with the Project Contributors and Community. The Council will have a private channel on discord that will be used sparingly and only when a specific matter requires privacy. When private communications and decisions are needed, the Council will do its best to summarize those to the Community after eliding personal/private/sensitive information that should not be posted to the public internet.\nSubcommittees The Council can create subcommittees that provide leadership and guidance for specific aspects of the project. Like the Council as a whole, subcommittees should conduct their business in an open and public manner unless privacy is specifically called for. Private subcommittee communications should happen on the main private discord channel of the Council unless specifically called for.\nInstitutional Partners and Funding The Steering Council are the primary leadership for the project. No outside institution, individual or legal entity has the ability to own, control, usurp or influence the project other than by participating in the Project as Contributors and Council Members. However, because institutions can be an important funding mechanism for the project, it is important to formally acknowledge institutional participation in the project. These are Institutional Partners.\nAn Institutional Contributor is any individual Project Contributor who contributes to the project as part of their official duties at an Institutional Partner. Likewise, an Institutional Council Member is any Project Steering Council Member who contributes to the project as part of their official duties at an Institutional Partner.\nInstitutions become eligible to become an Institutional Partner when they share same values of Open Science Labs and are available to collaborate to the project in any of these ways:\n publicizing open science labs in their social network allocate one or more contributors to help Open Science Labs projects or other affiliated projects funding Open Science Labs activities offering mentoring for Open Science Labs Contributors when contributing to their projects (defined by the Partner). offering opportunties for contracting Open Science Labs Conbributors who have contributed to their projects (defined by the Partner)  If at some point an existing Institutional Partner doesn't accomplish with these points mentioned above, then six month grace period begins. If at the end of this six months period they continue not to have any contribution, then their Institutional Partnership will lapse, and resuming it will require going through the normal process for new Partnerships.\nFunding acquired by Institutional Partners to work on The Project is called Institutional Funding. However, no funding obtained by an Institutional Partner can override the Steering Council. If a Partner has funding to do Open Science work and the Council decides to not pursue that work as a project, the Partner is free to pursue it on their own. However in this situation, that part of the Partner’s work will not be under the Open Science Labs umbrella and cannot use the Project trademarks in a way that suggests a formal relationship.\nInstitutional Partner benefits are:\n Acknowledgement on the Open Science Labs websites and in talks. Ability to influence the project through the participation of their Council Member. Council Members invited to Open Science Labs Developer Meetings.  A list of current Institutional Partners is maintained at the page About Us.\nDocument history  https://github.com/opensciencelabs/opensciencelabs.github.io  Acknowledgements Substantial portions of this document were adapted from the NumPy project governance and decision-making document https://github.com/numpy/numpy/commits/main/doc/source/dev/governance/governance.rst.\nLicense CC BY-SA 4.0: https://creativecommons.org/licenses/by-sa/4.0/\n","link":"https://osl-hugo.github.io/guidelines/governance/governance/","section":"guidelines","tags":["gobernance"],"title":"Open Science Labs Project Governance"},{"body":"This is an initial version of Open Science Labs Roadmap.\nTopics that were not considered yet on this document but should be added here in the near future are:\n Community Engagement Infrastructure Social media  In this document, we are focusing on our three current main areas: events, internship and partnership.\nEvents Open Science Labs motivate anyone and any group from the community to organize events about open science and tecnlogies.\nFor open science and technologies we mean any topic about science or technology that its usage is not restricted by license or agreements. Examples of topics that is accepted:\n Open Source Open Data Open Access Open Science Open Source Initiative (OSI) licensed libraries Open Source programming languages Science using open source software DevOps using open source technologies Any area of science (if the content is not restricted by a pay wall)  This list is just an example of topics accepted, but it is not limited to that. Some examples of topics that is NOT ACCEPTED:\n Private and restricted projects Proprietary technology A non open access paper discussion A proprietary operation system A proprietary programming language  Now, there are two events that is happening periodically:\n PyCafé DevOps webinars  Plans:\nFor these events, a plan is needed to reach to reach out more people and increase the engagment.\nOther meetings that are being considered and that need a greater commitment from the community to make them possible include:\n C++ meetings Compilers meetings R meetings  Last but not least, when OSL has all these pieces working we will start to plan an Annual Conference that should cover topics about open science and technologies.\nInternship The internship is a great opportunity to involve more people in the project, as well as to provide opportunities for the community to practice and learn from experienced people from around the world.\nInterns contribute mainly to affiliated projects (Open Science Labs Partnership), so they will work on open source projects and receives mentoring from other experienced contributors.\nWith this program, we aim to have them hired for these projects in the near future (depending on their progress).\nInterns also work on internal tasks to help Open Science Labs to grow, such as: blog post, PR review, documentation, organization tasks, etc.\nPlans:\nFor now, the number of inters that the project can afford is very small, but for this phase, it would be great to have around 10 interns in order to contribute to all the partnerships open source projects and to the Open Science Labs internal tasks.\nAlso, it would be great to participate to Google Summer of Code as well.\nPartnerships Partnership program helps us to connect to other projects and work groups in order to expand our network and experiences.\nAlso, it is a good approach to help the projects to have more visibility and contributions from the community.\nIn the partnership, we need someone from the partners side that will mentoring the interns that will contribute to their projects.\nThe desired scenario for the partnership program is when the intern that is contributing to a project is contracted by them, but it is not a requirement.\nPlans:\nThe partnership program needs to connect to more projects and, for this phase, it would be great to increase the number of partner to 20 (currently it is 5).\n","link":"https://osl-hugo.github.io/guidelines/roadmap/roadmap/","section":"guidelines","tags":["mentorías"],"title":"Open Science Labs Roadmap"},{"body":"","link":"https://osl-hugo.github.io/tags/coc/","section":"tags","tags":null,"title":"coc"},{"body":"Código de conducta de las mentorías Al acceder o utilizar los servicios de tutoría de OSL, y por lo tanto formar parte de esta comunidad, usted está de acuerdo en cumplir con nuestro Código de Conducta.\nLos participantes se comprometen a no participar en ninguna actividad torticera o criminal y si usted se involucra en dicha actividad, usted entiende que es totalmente responsable en la medida de la ley y que va a contratar a su propio abogado a su propio costo, pagar y todas las multas necesarias y otros costos y se compromete a mantener OSL inofensivo. Además, OSL queda indemnizada por cualquier acción que usted realice fuera del ámbito de su contrato y tutoría.\nLa participación es voluntaria y los participantes deberán indemnizar, eximir de responsabilidad y defender (colectivamente \u0026quot;indemnizar\u0026quot; e \u0026quot;indemnización\u0026quot;) a la OSL y a su personal o miembros de y contra todas las reclamaciones, demandas, acciones, juicios, daños, responsabilidades, pérdidas, acuerdos, juicios, costes y gastos (incluyendo pero no limitado a los honorarios y costes razonables de los abogados), ya sea o no la participación de una reclamación de terceros, que surgen de o se relacionan con (1) cualquier incumplimiento de cualquier representación o garantía de OSL contenida en este Acuerdo, (2) cualquier incumplimiento o violación de cualquier pacto u otra obligación o deber de OSL bajo este Acuerdo o bajo la ley aplicable, (3) (4) (5)] [otras categorías enumeradas de las reclamaciones y las pérdidas], en cada caso, sea o no causada por la negligencia de OSL o cualquier otra parte indemnizada y si la reclamación correspondiente tiene mérito.\nMentores y alumnos Como participante en la comunidad de mentores, usted se compromete a:\n Tratar a los demás dentro de la comunidad de mentores con respeto. Hacer un esfuerzo honesto y dedicar el tiempo suficiente a cada relación de mentoring que se establezca. No promover bienes o servicios de fuentes en las que tenga un interés financiero o personal. No aceptar honorarios o comisiones. Representarse honestamente sin identidades falsas o alias. Reconocer la diversidad de la comunidad OSL y respetar la variedad de normas culturales, creencias, prácticas y valores que contiene.  Mentores Como mentor dentro de la comunidad, te comprometes a\n No utilizar ninguna idea, producto o material que un alumno tenga, o pueda desarrollar, para promover su propio negocio o intereses financieros. Mantener la confidencialidad de todas las ideas, productos o materiales que le hayan sido confiados por su alumno. Animar a sus alumnos a mantener los más altos estándares éticos en sus trabajos. Mantenga un alto nivel de conducta personal y profesional con su alumno. Demuestra empatía sin hacer que el alumno se sienta incómodo. Comunica siempre de forma veraz. Apoya los objetivos de tu alumno y ayúdale a establecer metas alcanzables. Evita la intención o la apariencia de prácticas poco éticas o comprometedoras en las relaciones, acciones y comunicaciones. Remita a su pupilo al administrador del programa de tutoría en el caso de cuestiones o preguntas para las que no se sienta capacitado. No dude en hacer preguntas si encuentra alguna parte de las directrices poco clara o confusa. Tanto el mentor como el alumno tienen la gran responsabilidad de mantener y respetar la confidencialidad de toda la información impartida durante la relación de mentoría, ya que pueden escuchar información sensible y personal. Sin embargo, si dicha información es peligrosa o ilegal, un enfoque apropiado para el mentor es animar al alumno a tomar las medidas adecuadas por sí mismo.  Tutoreados Como alumno de nuestra comunidad, usted se compromete a\n Poner esfuerzo y energía en conseguir un mentor. Crear una relación de tutoría relevante, específica, detallada y clara. Mantener la confidencialidad de su relación de tutoría. Construir proactivamente su relación de mentoría. Comunicarse regular y abiertamente con su mentor. Cumplir el compromiso con su mentor y con su proceso de aprendizaje. Completar cualquier tarea acordada entre su mentor y usted. Mantener toda la información sensible proporcionada a través de su relación de tutoría en estricta confidencialidad.  ","link":"https://osl-hugo.github.io/guidelines/coc/coc/","section":"guidelines","tags":["mentoria","coc"],"title":"Código de conducta de las mentorías"},{"body":"OSL Descripción: Open Science Labs (OSL) es una comunidad que ofrece un espacio abierto para compartir, aprender y enseñar temas relacionados de Ciencia Abierta y Tecnologías Computacionales al público de Latinoamérica, pero no restringido a ello.\nOSL Misión: Crear un espacio abierto colaborativo para el aprendizaje orgánico entre todos de la comunidad. La Diversidad Equidad e Inclusión es uno de los ejes de la comunidad.\nOSL Resultados: Creación de grupos locales para difusión de conocimiento. Aculturamiento de prácticas de trabajo colaborativo y abierto. Actividades para difusión de conocimiento (blog, videos)\nOSL Declaración DEI: OSL reconoce que los procesos pedagógicos asociados al desarrollo de nuevas habilidades y destrezas son de largo aliento y son el resultado de la inversión de tiempo, la aceptación de la diversidad en condiciones equitativas y justas, la constancia y, sobre todo, el impacto acumulativo de decisiones enmarcadas en nuestro propósito como organización. Por ello, OSL establece sus objetivos para lograr un progreso medible en el avance de la DEI en cuatro aspectos:\n Capacidades: Ayudaremos a la comunidad de personas con interés en dominar las tecnologías abiertas y aplicarlas en la ciencia, a desarrollar las capacidades necesarias para lograrlo generando diversidad, equidad e inclusión que sea observable en sus espacios de trabajo e interacción. DEI con sentido: Asumiremos nuestras acciones y quehacer como organización con un enfoque positivo e intencional de DEI entre quienes integran OSL en sus distintos roles de colaborador, voluntario e integrante del Board. Ciencia Abierta diversa: Como resultado de desarrollar nuestras iniciativas actuales y futuras, conseguiremos una comunidad más diversa de personas interesadas por la tecnología en el ámbito de la ciencia abierta. COC y DEI en trabajo conjunto: Estableceremos un Código de Conducta (COC) para garantizar el establecimiento de prácticas positivas hacia el respeto de todas las personas y sus consideraciones en términos de honestidad intelectual, académica y personal en el desarrollo de nuestras actividades.  En función de ésto, nuestra comunidad considera los siguientes parámetros con respecto a la DEI:\n Diversidad: Nuestra comunidad está abierta a múltiples características demográficas, sociales, políticas, identidades, perspectivas y orígenes. Equidad: Quienes integran nuestra comunidad, así como sus distintos grupos y equipos de trabajo tienen acceso a todas las oportunidades y actividades que realizamos en función que las organizamos buscando, de forma explícita, eliminar las barreras que han impedido históricamente la participación de grupos minoritarios o excluidos. Inclusión: Todas las personas que componen nuestra comunidad experimentan un sentimiento de pertenencia, altos niveles de compromiso con las actividades en las que participan y respeto compartido y mutuamente expresado.  ","link":"https://osl-hugo.github.io/guidelines/dei/guide/","section":"guidelines","tags":["DEI"],"title":"Declaración de Diversidad, Equidad e Inclusión"},{"body":"","link":"https://osl-hugo.github.io/tags/dei/","section":"tags","tags":null,"title":"DEI"},{"body":"Este breve tutorial te mostrará como graficar mapas en R, extaer datos de archivos de formato shapefile, resaltar puntos en tu mapa y modificar su apariencia utilizando las bibliotecas rgdal y ggplot2.\nComenzando Para que todas las bibliotecas funcionen correctamente, se recomienda instalar o actualizar a las últimas versiones de R y de su IDE RStudio con su correspondiente complemento RTools.\nEn este artículo, vamos a utilizar archivos de formato Shapefile. Si todavía no sabes de qué se trata, te explicamos a continuación.\nUn archivo Shapefile contiene al menos:\n .shp - un archivo tipo shape, es la geometría misma. .shx - un archivo tipo index, tiene las posiciones indexadas del archivo .shp. .dbf - un archivo tipo attribute, tiene los atributos de cada forma en una columna, es de tipo dBase IV.  Adicionalmente, la carpeta donde se encuentran dichos archivos pueden contener otros archivos de formato .prj o .sbn, estos aportan más datos de la geometría o pueden ser usados en otros programas de sistemas de información geógrafica.\nLos datos importados con rgdal a partir de un archivo shapefile, son objetos que contienen polígonos vectoriales, con las coordenadas la latitud y la longitud en formato decimal. A partir de estos objetos, podemos extraer datos para graficarlos desde una tabla. La biblioteca broom nos ayuda en la extracción y agrupa los datos para su correspondientes graficación.\nObteniendo nuestros archivos shapefile Muchos de estos archivos Shapefile representan mapas de nuestros Estados, por lo que están disponibles de manera gratuita en la mayoria de los casos, en otros, son de paga o están más completos, actualizados y/o poseen datos específicos. Debajo mostramos algunos recursos web gratuitos que puedes usar.\ndata.humdata.org para shapefiles varios países del mundo. (Algunos están desactualizados)\ngeo.gob.bo para shapefiles de Bolivia\nInstalación de pre-requisitos Las siguientes bibliotecas de R son necesarias, para realizar nuestro ejemplo.\n1install.packages(\u0026#34;ggplot2\u0026#34;) # biblioteca para graficar. 2install.packages(\u0026#34;rgdal\u0026#34;) # biblioteca para abrir archivo de formato shapefiles (datos geográficos) 3install.packages(\u0026#34;broom\u0026#34;) # biblioteca usada para extraer datos del archivo importado de shapefiles 4install.packages(\u0026#34;tidyverse\u0026#34;) # biblioteca usada para unir tablas 5install.packages(\u0026#34;rio\u0026#34;) # biblioteca para importar datos de archivos csv 6install.packages(\u0026#34;dplyr\u0026#34;) # biblioteca usada para agrupar por valores de columnas 7install.packages(\u0026#34;extrafont\u0026#34;) # biblioteca para importar los tipos de letra de windows. (Recuerde que para ejecutar una linea de Comando en el Editor de RStudio se usa Ctrl+Enter)\nPreparación de los datos para graficar Nuestra base de datos fué descargada de GeoBolivia, INE Bolivia y geodatos.net. Una vez descargado los datos estos fueron depurados para el ejemplo.\nAbrimos nuestras bibliotecas requeridas:\n1library(ggplot2) 2library(rgdal) 3library(broom) 4library(tidyverse) 5library(rio) 6library(dplyr) 7library(extrafont) Redireccionamos el directorio actual, a nuestro directorio de trabajo e importamos nuestros archivos shapefiles:\n1setwd(\u0026#34;../mypath/\u0026#34;) # redirecciona el directo actual a nuestro directorio de trabajo 2# importamos los datos geofgráficos a nuestra varibales shapefile 3shapefile = readOGR( 4 dsn = \u0026#34;.\u0026#34;, 5 layer = \u0026#34;departamentos_geo\u0026#34;, 6 encoding = \u0026#39;utf-8\u0026#39;, 7 use_iconv = TRUE 8)   dsn: carpeta dentro del directorio actual, donde se encuentran ficheros shapefiles, si se pone sólo un punto \u0026quot;.\u0026quot; hace referencia a que los ficheros se encuentran en la carpeta actual.\n  encoding=\u0026quot;utf-8\u0026quot;, use_iconv=TRUE: indica a la función readOGR que debe importarse con la codificación utf-8. Siendo que nuestro archivo contiene caracteres del español como ñ y vocales con tildes, nos es conveniente usar este comando.\n  Para observar el contenido de shapefile, use View(shapefile).\nExtraemos datos en geotable y a continuación mostramos su cabecera:\n1geotable = tidy(shapefile) 2head(geotable) 1\u0026gt; head(geotable) 2# A tibble: 6 x 7 3 long lat order hole piece group id 4 \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;lgl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;chr\u0026gt; 51 -65.8 -18.0 1 FALSE 1 0.1 0 62 -65.8 -18.0 2 FALSE 1 0.1 0 73 -65.8 -18.0 3 FALSE 1 0.1 0 84 -65.8 -18.0 4 FALSE 1 0.1 0 95 -65.8 -18.0 5 FALSE 1 0.1 0 106 -65.8 -18.0 6 FALSE 1 0.1 0 Nótese que geotable, no poseé las etiquetas de los nombres de las regiones a graficar, esto lo arreglamos con:\n1# añadiendo una columna id para poder juntar las columnas de nuestro geotable 2shapefile$id \u0026lt;- row.names(shapefile) 3 4# añadiendo a geotable los datos que faltan desde shapefile y juntandolo por el id 5geotable \u0026lt;- left_join(geotable, shapefile@data, by = \u0026#34;id\u0026#34;) Para verificar que se han añadido los correspondientes nombres de regiones, usehead(geotable)\nFunciones auxiliares:\n shapefile$id \u0026lt;- : crea una nueva columna id en shapefile o la reemplaza. row.names(shapefile) : extrae los nombres de las filas del shapefile que por defecto es una numeración que va desde 0 y coincide con el id de nuestro geotable. shapefile@data  accede a la tabla o dataframe data de nuestro shapefile. left_join(tabla1, tabla2, by = clave) : junta dos tablas por izquierda, es decir añade valores que faltan de tabla2 a la tabla1 de acuerdo al código clave o columna común.  Ahora importamos nuestra tabla con los datos de población por departamento: (haciendo header = TRUE nos aseguramos que la primera fila se conviertan en los nombres de las columnas)\n1# importando la tabla de datos de población 2poblacion \u0026lt;- import(\u0026#34;departamentospoblacion.csv\u0026#34;, header = TRUE) Nótese que cambiamos el nombre nuestra columna de en población DEPARTAMENTO por DEPARTAMEN, para que coincidan nuestra columnas y luego juntarlas con left_join().\n1# cambiando el nombre de la columna de DEPARTAMENTO POR DEPARTAMEN 2colnames(poblacion)[colnames(poblacion) == \u0026#34;DEPARTAMENTO\u0026#34;] \u0026lt;- \u0026#34;DEPARTAMEN\u0026#34; 3# juntamos en datos ambas tablas 4datos\u0026lt;-left_join(geotable, poblacion, by = \u0026#34;DEPARTAMEN\u0026#34;) Graficando el mapa con ggplot2 Ahora, graficamos con ggplot2:\n1ggplot() + 2 geom_polygon(data = datos, aes( 3 x = long, 4 y = lat, 5 group = group, 6 fill = Poblacion2022 7 )) + 8 coord_equal() + labs(fill = \u0026#34;POBLACION\u0026#34;)  geom_polygon(data, aes(x, y, group, fill)): dibuja polígonos con la tabla data y muestra la estética con aes(). x, y son los valores en ejes de las absisas y las ordenadas, estan agrupadas por el valor de la columna group y se colorea con base a los valores de la columna fill. coord_equal(): obliga a la gráfica que la relación de aspecto entre coordenadas sea 1:1. lab(fill): pone el título a la leyenda con fill.       Mejorando la presentación de nuestro mapa Entre las cosas que podemos hacer para mejorar la apariencia de nuestra gráfica, están poner un título, cambiar los colores, el fondo, el formato de nuestra leyenda. A continuación mostramos como hacerlos.\nExtraemos los valores de la población, para ponerlas como etiquetas dentro de nuestro mapa, para ello utilizamos las funciones group_by() y summarise() de la biblioteca dplyr.\n1etiquetas_poblacion \u0026lt;- datos %\u0026gt;% group_by(DEPARTAMEN) %\u0026gt;% 2 summarise( 3 label_long = mean(range(long)), 4 label_lat = mean(range(lat)), 5 pob = mean(Poblacion2022) 6 )  tabla0 %\u0026gt;% funcion0 %\u0026gt;% funcion1 ...: Esta notación indica que se debe tomar la tabla0 como argumento de la funcion0, luego los resultados de la funcion0 deben tomarse como argumentos de la función1 y así sucesivamente. El símbolo %\u0026gt;% es conocido como pipe operator este nos ayuda para concatenar valores de entrada y salida de diferentes funciones. group_by(col) %\u0026gt;% summarise(col1=accion1, col2=accion2 ...): agrupa los datos en función del valor de columna col y con summarise() usa los datos agrupados para devolver nuevos valores: col1, col2 ..., que pueden estar en función de los valores que están agrupados. range(v): extrae los valores máximo y mínimo de un rango de datos v. mean(v): devuelve el valor medio del vector v.  Si, queremos incluir nuevas fuentes para el tipo de letra para nuestro mapa, empleamos los siguientes comandos: (Nota: nos pedirá confirmación para realizar la importación de fuentes y tardará unos minutos):\n1extrafont::font_import(\u0026#34;C:/Windows/Fonts\u0026#34;) 2loadfonts(device = \u0026#34;win\u0026#34;) 3fonts() # Nos muestra las fuentes disponibles. Incluimos los datos de etiquetas_población en nuestra gráfica.\n1ggplot() + 2 geom_polygon(data = datos, aes( 3 x = long, 4 y = lat, 5 group = group, 6 fill = Poblacion2022 7 )) + 8 coord_equal() + theme_void() + 9 geom_text( 10 size = 4.5, 11 alpha = 0.9, 12 fontface = \u0026#34;bold\u0026#34;, 13 data = etiquetas_poblacion, 14 mapping = aes( 15 x = label_long, 16 y = label_lat, 17 label = format(pob, big.mark = \u0026#34; \u0026#34;), 18 color = pob 19 ) 20 ) + 21 labs(title = \u0026#34;Población estimada de Bolivia por departamentos para el año 2022\u0026#34;, 22 fill = \u0026#34;Habitantes\u0026#34;, 23 caption = \u0026#34;Datos:INE Boliva; GeoDatos: GeoBolivia\u0026#34;) + 24 scale_colour_gradientn(colours = c(\u0026#34;black\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;white\u0026#34;), 25 guide = \u0026#34;none\u0026#34;) + 26 scale_fill_continuous( 27 low = \u0026#34;#C4FFD1\u0026#34;, 28 high = \u0026#34;#05693E\u0026#34;, 29 guide = \u0026#34;colorbar\u0026#34;, 30 labels = scales::label_number(big.mark = \u0026#34; \u0026#34;) 31 ) + 32 theme( 33 plot.title = element_text( 34 size = 14, 35 face = \u0026#34;bold\u0026#34;, 36 family = \u0026#34;Helvetica\u0026#34;, 37 hjust = 0.5 38 ), 39 legend.title = element_text(size = 12, family = \u0026#34;Rubik\u0026#34;), 40 plot.caption = element_text(family = \u0026#34;Helvetica\u0026#34;) 41 )  theme_void(): elimina el fondo y los ejes de nuestra gráfica. geom_text(size, alpha, fontface, data, mapping = aes(x, y, label), color): extrae los datos de data, para graficar el texto label en las coordenadas x e y, si, se desea una diferenciacion de colores usesé color. Con size, alpha y fontface, se establece el tamaño, la opacidad y la estetica del texto respectivamente. format(v, big.mark): da el formato al valor v, indicando la separación de miles con big.mark (En nuestro ejemplo el separador de miles es sólo el espacio \u0026quot; \u0026quot;). labs(title, fill, caption): con title, fill, caption pone el texto del título, la leyenda y el pie del gráfico respectivamente. scale_colour_gradientn(colours, guide): aplica una escala de colores a todos los valores asignados a el argumento color, en nuestro ejemplo tenemos color dentro de la función geom_text(... aes(.. color = pob ...) ...), es decir los valores de pob estarán coloreados según los valores de colours (la sintaxis color colors pueden intercambiarse sin problema con colour y colours) y para que la guia de leyenda no se muestre usamos guide = \u0026quot;none\u0026quot;. scale_fill_continuous(low, high, guide, labels): establece una escala de colores continua a los valores asignados a fill, en nuestro ejemplo fill, está dentro de la función geom_polygon(... aes(... fill = Poblacion2022 ...) ...), es decir los valores de la columna Poblacion2022 estaran afectados por esta función. Usamos low para el color correspondiente al valor más bajo y high para el color del valor más alto. Con guide = colorbar mostramos nuestra leyenda en forma de colobar y conlabels modificamos la apariencia en la escala de nuestro colorbar. scales::label_number(big.mark=\u0026quot; \u0026quot;): usa la función label_number() de la biblioteca scales. Con esto modificamos la apariencia de los números de nuestra leyenda poniéndole un espacio \u0026quot; \u0026quot; como separador de miles. (Nótese que podemos usar scales::funcion() en vez de library(scales) funcion()). theme(plot.title, legend.title, plot.caption): modifica la apariencia del título del gráfico, el título de la leyenda y el pie de gráfico respectivamente. element_text(size, face, family, hjust): extrae propiedades del texto para modificar el tamaño, la estética, el tipo y la posición en horizontal.       Añadiendo ubicaciones a nuestro mapa Incluyendo las ubicaciones de ciudades capitales de departamento a nuestro mapa:\n1ciudades = import(\u0026#34;ciudades.csv\u0026#34;) # importamos la localización de las ciudades capitales 2 3ggplot() + 4 geom_polygon( 5 data = datos, 6 aes( 7 x = long, 8 y = lat, 9 group = group, 10 fill = DEPARTAMEN 11 ), 12 color = \u0026#34;gray\u0026#34;, 13 size = 0.5 14 ) + 15 geom_point( 16 alpha = 0.7, 17 data = ciudades, 18 mapping = aes(x = lat, y = long, colour = Ciudad), 19 size = 5 20 ) + 21 coord_equal() + labs(title = \u0026#34;Capitales de Departamento en Bolivia\u0026#34;, 22 color = \u0026#34;Ciudades Capitales\u0026#34;, 23 caption = \u0026#34;Fuente: geodatos.net, GeoBolivia\u0026#34;) + 24 scale_fill_brewer(palette = \u0026#39;PuBuGn\u0026#39;, guide = \u0026#34;none\u0026#34;) + 25 scale_color_manual(values = rainbow(9)) + 26 theme_void() + 27 theme( 28 plot.title = element_text( 29 size = 14, 30 face = \u0026#34;bold\u0026#34;, 31 family = \u0026#34;Helvetica\u0026#34;, 32 hjust = 0.5 33 ), 34 legend.title = element_text(size = 12, family = \u0026#34;Rubik\u0026#34;), 35 plot.caption = element_text(family = \u0026#34;Helvetica\u0026#34;) 36 )  geom_point(alpha, data, mapping = aes(x, y, colour), size): dibuja puntos dentro del gráfico, comparte similares argumentos con geom_poligon() y geom_text(). scale_fill_brewer(palette, guide): similar a la función scale_fill_continuous(low, high, guide, labels) aplica una escala de colores tipo brewer a todos los objetos asignados a fill y con pallete seleccionamos el tipo de paleta de colores a aplicarse. scale_color_manual(values): nos permite usar una escala de colores manual, values debe ser un vector que contenga los valores de los colores de la escala. *raibow(9): devuelve un vector con 9 colores del arcoiris.       Asignando colores Puedes asignar los colores simplemente usando su nombre en inglés. Para el blanco es white, para el rojo, red. También puedes utilizar el código hexadecimal, como #FF4500 para el rojo anaranjado; agruparlos en una escala de colores, utilizando el comando c(\u0026quot;red\u0026quot;,\u0026quot;#FF4500\u0026quot;...). Una página recomendable para seleccionar colores y obtener su código de color con un click es r-chart.com/colors/. También puede emplear las funciones auxiliares que ofrece R, por ejemplo: scale_color/fill_brewer/viridis_. Estas proporcionan escalas predefinidas que podrían mejorar el impacto visual.\nGuardando nuestro mapa RStudio ofrece la posibilidad de exportar fácilmente desde su menú, ubicado encima de la vista previa del gráfico \u0026quot;Export\u0026quot;. Podemos optar por guardar nuestro mapa con mayor calidad o cierto formato y, para ello, podemos usar ggsave(), que nos permite exportar o guardar nuestro último gráfico ejecutado.\n1ggsave( 2 filename = \u0026#34;grafica.png\u0026#34;, 3 path = \u0026#34;.../mypath/\u0026#34;, 4 scale = 1, 5 device = \u0026#34;png\u0026#34;, 6 dpi = 320 7) Guarda el mapa con el nombre filename en la ruta path, con la escala y formato de scale y device. Con dpi indicamos la cantidad de píxeles por pulgada, que es la calidad de nuestro archivo a exportar.\nReferencias  Instituto Nacional de Estadística Bolivia GeoBolivia geodatos.net Robinlovelace Documentacion de R  ","link":"https://osl-hugo.github.io/blog/dibuja-tus-mapas-en-r-usando-archivos-de-formato-shapefile/","section":"blog","tags":["r","maps","visualización de datos"],"title":"Dibuja tus mapas en R usando archivos de formato Shapefile"},{"body":"¿Qué es la una mentoría? La mentoría es una técnica o proceso en el que una persona con experiencia (mentor/a) guía a otras personas (aprendices o mentorados/as) para lograr su meta y objetivos personales en un espacio de tiempo limitado. Quien ejerce la mentoría no necesariamente es quien enseña, entrena o impulsa, sino también apoya, alienta a sus aprendices y conservando apertura a preguntas y a escuchar. Se trata de ayudarse mutuamente a expandirse y crecer para que todas las personas aprendan.\nAdemás, una mentoría efectiva brinda oportunidades para compartir talentos, habilidades, experiencias y conocimientos obtenidos a través de la capacitación regular, el entrenamiento y la retroalimentación continuos, no sólo para aprendices sino también para mentores/as.\nQuienes ofrecen la mentoría no tienen responsabilidad directa por el desempeño laboral de los/las aprendices. Solo ofrecen consejos y motivan para potenciar el desarrollo profesional de éstos.\nTipos de mentoría La universidad de Auckland sugiere dos tipos de relaciones de mentoría:\n  Mentoría informal, cuando alguien con más experiencia que otras personas ayuda de forma espontánea y sin pedir hacerlo de forma explícita. Los vínculos se inician entre individuos de forma directa.\n  Mentoría formal, hay una solicitud u oferta oficial de relaciones de mentoría. Mentores/as y aprendices siguen un programa de mentoría estructurado, haciendo acuerdos sobre su naturaleza y estableciendo metas entre ellos/as.\n  Habilidades y experiencia requeridas para ser mentor/a Según la Universidad Metropolitana de Manchester (MMU), existen al menos diez requisitos para ser mentor/a:\n  Autoconciencia: se relaciona con tener objetivos personales propios, carrera y conocer las propias fortalezas.\n  Saber hacer organizacional: significa un conocimiento individual que tienen los/as mentores/as, y que proporciona una ventaja sobre otros en el mismo campo, se trata de saber cómo funcionan las cosas.\n  Credibilidad en la determinación de objetivos y desarrollo de capacidades: es importante que los/as mentores/as tengan credibilidad personal y profesional en su área y que sean miembros de organizaciones relevantes.\n  Accesibilidad: El éxito de la mentoría depende del tiempo dedicado a los/as aprendices. Además, los/as mentores/as deben hablar regularmente para establecer un nivel de comodidad en la relación en torno a los temas fáciles, luego, cuando surge un desafío o una inquietud, es mucho más fácil para tener una discusión útil.\n  Las habilidades de comunicación o escucha activa (teniendo en cuenta los intereses, el lenguaje corporal, la atención y dar consejos) ayudan a determinar las motivaciones y necesidades de sus mentorados.\n  Capacidad para empoderar: los/as mentores/as tienen la capacidad de crear un entorno de trabajo en el que los/as aprendices se tengan seguridad para contribuir de diferentes maneras.\n  Un deseo de ayudar a otros a formarse: los/as mentores/as deben comprender cómo los/as aprendices obtienen experiencia a partir de la mentoría, ya sea de manera formal o informal.\n  Inventiva: los/as mentores/as deben tener la mente abierta para hacer cosas nuevas y diferentes en la mentoría, para ayudar a los/as aprendices a obtener perspectivas más amplias de sus experiencias.\n  Empatía: la capacidad de sentir las emociones de los/as aprendices, o lo que podría estar pensando o sintiendo.\n  Comprensión: los/las mentores/as pueden observar a sus aprendices cómo aprenden y brindarles comentarios constructivos.\n  Algunas otras habilidades adicionales son:\nAlentar e inspirar: los/as mentores/as tienen la capacidad de comentar sobre los logros de los/as aprendices. Creen en la capacidad de éstos para crecer personal y profesionalmente. Además, responden a sus frustraciones y desafíos. Es importante que los/as mentores/as compartan su visión personal o la de otros líderes, como sus experiencias, errores y éxitos en el logro de sus objetivos The Center for Health Leadership \u0026amp; Practice (CHLP).\nEl proceso de mentoría / etapas El proceso de mentoría es una actividad que tiene un principio y un final. En este sentido, el MMU enumera tres etapas:\n Inicial; (construyendo la relación): en la cual se explican los objetivos de la mentoría. Tiempo para relacionarse (calendario para la comunicación). Se sugiere discutir antecedentes, experiencias, intereses y expectativas. Establecer las reglas (como por ejemplo, el formato de la reunión). Sesiones de mentoría; planificación de sesiones de mentoría (revisión de experiencias, cuándo y cuánto tiempo, metas, avance de avances). Quienes conducen la mentoría deben hablar sobre sí mismos/as, sus habilidades, su organización, experiencia y los desafíos que enfrentan. Además, pueden intercambiar información y ayudar a sus aprendices a establecer y reenfocar sus objetivos periódicamente. Finalmente, deben trabajar hacia las metas (parte larga y desafiante del proceso de mentoría), mediante discusiones, compartiéndoles material, probando otros contenidos de aprendizaje y actividades de desarrollo. Los/as mentores/as crean oportunidades para que los/as aprendices adquieran experiencia, es un buen momento para presentarlos a otros/as colegas. Evaluar el progreso de esta relación mentor/a-aprendices (ajustes, resultados, beneficios). Avanzar; identificar cuándo terminará la relación mentores/as-aprendices, como cuando concluyen los objetivos, los desafíos y el progreso hacia las metas. Ayude a los/as aprendices a identificar y próximos pasos, fomente la autorreflexión. Explore otros tipos de apoyo para cubrir sus necesidades. Además, es importante considerar que hay otras razones para terminar la relación de mentoría, por ejemplo, el programa puede estar llegando a su fin o la relación no está funcionando correctamente y ambas partes desean seguir de forma separada.  Establecer metas y expectativas La Harvard University sugiere que tanto mentores/as como aprendices establezcan sus objetivos, expectativas y colaboren activamente para tener una mentoría efectiva. Aquí hay algunos pasos a considerar:\n Compromiso establecido entre aprendices y mentores/as antes de iniciar una relación de mentoría porque requiere tiempo y esfuerzo de ambos. Autoconocimiento, los/as aprendices comienzan determinando objetivos específicos y lo que es más relevante y apropiado para ellos en la relación de mentoring. Una vez que aclaren sus objetivos, ahora pueden considerar cómo esta relación podría contribuir a lograr sus objetivos. Vinculación: los/as aprendices están listos/as para considerar mentores/as potenciales para que los apoyen, en función de sus expectativas con respecto a las cualidades y atributos de los/as mentores. Establecimiento de la relación de mentoría. Los/as mentores y los/as aprendices deben definir pautas y acuerdos al principio de la mentoría. La planificación mantendrá la asociación de mentoría encaminada y enfocada en los objetivos principales. Los mentores y los/as aprendices deben trabajar en conjunto para establecer pasos de acción para cada objetivo y cómo hacerlos efectivos. Una mentoría exitosa depende de la inversión de energía en la relación y el compromiso con la experiencia. El final de una mentoría es una parte tan importante del proceso como los pasos previos. Es importante entender que no significa el final de la relación. En este proceso, puede ser una excelente oportunidad para tener una discusión similar sobre la experiencia en su conjunto o celebrar los logros. Además, los/as antiguos/as aprendices y mentores/as son excelentes recursos para incluir en la red. Al igual que con cualquier conexión de red, los/as aprendices deben asegurarse de mantenerse en contacto y participar en las comunidades derivadas de las mentorías.  Ética y mentoría Los/as mentores necesitan examinar y reflexionar continuamente sobre sus valores éticos y cómo pueden influir en las decisiones en su práctica de mentoría. A continuación, se presentan algunas características profesionales que contribuyen a tener una mentoría efectiva:\n Los/as mentores/as y aprendices deben conocer bien el código de conducta de su institución para la mentoría. Al mismo tiempo, deben leer los códigos de ética profesional para tener una relación de mentoría saludable y aceptar eso antes de que comience la mentoría. El desarrollo de pautas normativas, entre mentores/as y aprendices, es una herramienta poderosa para reflexionar en conjunto sobre valores y límites, y para promover el pensamiento ético. En la mayoría de las profesiones, un conjunto de valores determina la conducta profesional ética y se convierte en parte de la identidad profesional. Los/as mentores/as deben asumir la responsabilidad del poder que ostentan y nunca utilizarlo de forma abusiva sobre otros más vulnerables. Debe haber una estructura de denuncia abierta y clara para cualquier abuso de poder. Los/as aprendices pueden identificarse con mentores/as que tienen valores, actitudes y experiencias que ellos tienen o aspiran a tener.  Además, The Actuaries w Without Borders describe algunas características personales en la mentoría:\n Mentores/as; hacer preguntas abiertas y de apoyo y proporcionar comentarios constructivos. Mentores/as; mantener un tono amistoso y sea positivo. Mentores/as; fomentar las oportunidades de desarrollo para los/as aprendices. Mentores/as; ayudar a los aprendices a resolver su propio problema, en lugar de cómo hacerlo. Mentores/as; dar un refuerzo positivo. Mentores/as; ser accesibles para ayudar a los/as aprendices. Aprendices; estar preparado/a. Aprendices; asumir la responsabilidad de los errores. Aprendices; agradecer a su mentor/a. Mentores/as y aprendices; Valorar al/la socio/a mentor/a como persona Mentores/as y aprendices; Desarrollar la confianza y el respeto mutuos. Mentores/as y aprendices; Escuchar activamente tanto lo que se dice como cómo se dice.  Mejores prácticas de mentoría La mentoría implica la relación entre mentores/as y aprendices. Los/as buenos/as mentores/as son personas entusiastas que disfrutan el papel que desempeñan para ayudar a otros a lograr sus objetivos (CHLP). Hay algunos roles diferentes que los/as mentores/as pueden estar obligados a tomar:\n Trabajo en red; los/as mentores/as ayudan a los/as aprendices a encontrar personas y recursos que van más allá de su experiencia. Asesoramiento; los/as mentores/as alientan, inspiran y desafían a los/as aprendices a lograr sus objetivos. Además, actúan como confidentes, ayudando a los/as aprendices a aclarar problemas reales y viendo el panorama general. Facilitar; los/as mentores/as comparten sus experiencias, consejos, enfatizando cómo su experiencia podría ser diferente de sus experiencias. Entrenamiento; los/as mentores/as construyen la confianza de sus aprendices a través de comentarios de apoyo. Disfrutando del proceso de la mentoría; los/as mentores/as deben ser espontáneos solo para enviar una palabra de aliento o una nueva información. Evitar controlar la relación de mentoría. Se recomienda que sea el/la aprendiz quien se asegure fijar la siguiente fecha de reunión en coordinación con el/la mentor/a.  Comenzando a ser mentorado en OpenScienceLabs  Quien aspire a contar con una mentoría deberá llenar una formulario en ****. Detallando el área de mentoría, la disponibilidad de tiempo (incluir la zona horaria) y objetivos que se quiere lograr después de la terminada. Con base en el formulario, OpenScienceLabs buscará mentores/as dentro la comunidad, en un plazo no mayor a una semana se le mostrará las opciones al/la aspirante a aprendiz. Una vez se haya coordinado con el/la mentor/a y el/la aprendiz se organizará una primer encuentro que en lo posible tendrá la participación de una persona del Board de OpenScienceLabs. A partir de esa primera reunión el/la aprendiz y el/la mentora coordinarán sus siguientes sesiones para la mentoría. Una vez finalizada la mentoría ambos, mentor/a y aprendiz llenarán un formulario para indicar si la mentoría alacanzó sus objetivos, cuales fueron las dificultades y/o razones de conclusión de la mentoría.  Código de conducta de mentores (MCOC) Como organización, nos unimos al     . No obstante, hemos decidido complementarlo con un apartado dedicado al proceso de mentoring. Para obtener más información sobre nuestro Código de conducta de mentores, revise esa sección en nuestro [Código de conducta] (mentoring-guideline/docs/COC.md).\n","link":"https://osl-hugo.github.io/guidelines/mentoring/guide/","section":"guidelines","tags":["mentorías"],"title":"Guía de Mentorías"},{"body":"Introducción General El propósito de esta guía es acompañar los primeros pasos de colaboradoras y colaboradores de OSL en la elaboración de sus posts para ser publicados en nuestro blog.\nEn la lectura de esta guía se encuentra una base simplificada de los distintos elementos que se deben tener en cuenta en la escritura de este material.\nCaracterísticas básicas de los posts.  Aunque se admitirán eventualmente materiales traducidos de otros idiomas, correctamente referenciados, en general los artículos deberán ser inéditos. Esto permitirá mejorar el posicionamiento del portal como referencia. Importante: No abordar temas similares a artículos anteriores en el blog. En los artículos abordamos temas generales de ciencia abierta, software de fuentes abiertas que se utiliza en proyectos de ciencia abierta, gestión de equipos de trabajo, ciencia colaborativa, y uso de aplicaciones, bibliotecas y otras herramientas específicas, entre otros. La extensión esperada de los posts es de hasta 900 palabras. Una extensión mínima deseable es de 750 palabras. Cada post debe ir acompañado de una imagen de cabecera o imagen destacada. En los artículos recientes, las imágenes han sido obtenidas de algunos de estos sitios:  https://www.glazestock.com/ https://drawkit.com/ https://undraw.co/illustrations   Adicionalmente, según la extensión del artículo, pueden haber imágenes internas que sirvan de soporte visual a las ideas planteadas. Utilizar Google Trends para localizar palabras de referencia para contenidos de artículos Los títulos deben cumplir con las siguientes características: ser cortos, estar vinculados con el contenido del artículo e invitar a su lectura. En los títulos se pueden agregar emoticones sin abusar de ellos. Pueden utilizarse hasta tres subtítulos internos para separar las secciones del artículo en caso de ser necesario. Los subtítulos llevan el tamaño de encabezado H2 Es importante incluir referencias a los artículos que facilitamos desde nuestro portal. Asimismo, es muy importante incluir enlaces internos en los artículos. Enlaces tanto a artículos previos en el portal, como enlaces a las páginas de los proyectos, aplicaciones, y herramientas que se reseñan en él entre otros. Atención a las etiquetas, siempre incluirlas sin hacerlas muy simples o poco precisas. Las imágenes utilizadas deben tener contenido “Alt” especificado y autoría al pie de la imagen.  Sobre el tono y el lenguaje inclusivo.  Los artículos se escriben con un tono cercano, simple, directo, claro y preciso ¡No nos interesa mostrar sabiduría sino compartir conocimiento! Queremos animar a más personas a que realicen prácticas colaborativas y de ciencia abierta. El tono debe ser fresco, incluso en tareas algo más complejas de explicar, la idea es animar a quienes nos leen a que continúen con las prácticas de ciencia abierta. Practicamos lenguaje inclusivo. Por ello buscamos el uso genérico de las palabras que no indican ningún sexo ni ningún género de forma preferente: personas, participantes, quienes, entre otras. En caso de deber utilizar alguna palabra que denote sexo y género, indicar también las referencias a otros géneros y sexos: /a/e. Esto se aplica tanto al singular como al plural. En general, tanto el tono como el discurso debe ser respetuoso y claro. Se evitarán palabras que, por razones culturales puedan ser malinterpretadas en otras culturas. En OSL somos muy respetuosos/as/es de otras culturas, prácticas religiosas, preferencias políticas, deportivas y, en general, nunca abordamos en los artículos nuestras preferencias personales en cualquier ámbito que pueda resultar controversial y resultar incómodo a quienes nos leen. Esto es clave para hacer de este espacio un lugar seguro en el que la pasión e interés por la ciencia abierta, nos reúna y anime a colaborar.  Aunque en los artículos puede hacerse referencia a experiencias personales, siempre es importante mantener el foco de los escritos en la propuesta de una solución a una necesidad de información o conocimiento sobre los temas abordados.  Flujo de trabajo  Cada colaborador/a/e establece el ritmo de trabajo que aportará al portal y selecciona los temas y orden en que serán asumidos, así como las fechas en que estarán disponibles para su revisión. Cada colaborador/a/e cuenta con un acompañamiento inicial entre 1 hasta 3 semanas para manejo del wordpress y primeros pasos con el flujo de edición, según lo acordado el Board de OSL. Colaborador/a/e elabora el artículo desde su cuenta en el portal. Una vez terminada la escritura del artículo, junto con las imágenes sugeridas, éste permanece en borrador a la espera de que quien esté asignado/a/e a la revisión, le haga una revisión básica de ortografía, claridad y coherencia. Quien revisa el escrito para su publicación es quien debe programar su publicación en el portal. Los artículos deben contar con entre 5 y 8 palabras clave que serán colocadas en la sección ETIQUETAS del escrito. Igualmente, cada escrito debe contar con la categoría a la cual pertenece. Salvo indicación o acuerdo previo, ningún colaborador/a/e debe editar escritos de otros colaboradores/as. Se anima a nuestros/as/es colaboradores/as a que repliquen sus publicaciones en nuestro portal, a través de sus redes sociales personales, siempre que se haga referencia a las redes sociales de OSL para su promoción.  Temas propuestos:  Guías para instalación de aplicaciones, bibliotecas o librerías de uso frecuente en ciencia abierta y prácticas similares. Títulos sugeridos: Aprende a instalar XX en unos pocos minutos, Te mostramos cómo instalar XX en tu PC rápidamente. Trucos que ayudan a resolver problemas específicos. Títulos sugeridos: 5 tips que necesitas saber para mejorar el rendimiento de XX, 3 claves que no debes perder de vista en tu próximo proyecto de ciencia abierta. Artículos para público general con divulgación de aspectos relativos a ciencia abierta, laboratorios colaborativos, ciencia ciudadana entre otros. Traducciones de artículos interesantes y relevantes para la temática del portal de OSL (previa consulta con equipo editorial). Reseñas sobre artículos, libros, videos, podcasts referidos al ámbito de ciencia abierta y similares.  ","link":"https://osl-hugo.github.io/guidelines/articles/guide/","section":"guidelines","tags":null,"title":"Guía Editorial para creación de Artículos"},{"body":"Guía para Recaudación de Fondos Patrocinadores fiscales Un patrocinador fiscal es una organización sin ánimo de lucro que comparte su estatus 501(c)(3) con proyectos sin ánimo de lucro cualificados. Con este estatus compartido, el proyecto no necesita constituirse como 501(c)(3), lo que significa, entre otras cosas, que tampoco tiene que presentar sus propios impuestos.\nCommunity Initiatives ¿Qué es Community Initiatives? Es un patrocinador fiscal dedicado cuyo único propósito es proporcionar la mejor infraestructura para los líderes de las organizaciones sin ánimo de lucro. Trabajan en varios temas y en diversas áreas geográficas, también varían en cuanto a personal y presupuesto.\n¿Cómo unirse a Community Initiatives? Para solicitar el patrocinio fiscal de Community Initiatives, los posibles proyectos deben enviar un formulario de consulta, si parece que encajamos bien, el Vicepresidente de Servicios al Cliente nos guiará a través del proceso de solicitud.\n¿Qué contiene el formulario de consulta? Allí se solicita información sobre: datos personales del solicitante, nombre, sitio web, misión del proyecto y las áreas que lo comprenden, el presupuesto previsto del proyecto para el próximo año, desde cuándo opera la organización sus programas, si trabajan actualmente con un patrocinador fiscal o si han trabajado alguna vez con uno de ellos, si se cuenta con un comité de consulta o supervisión. También piden una aproximación de la cantidad de personas atendidas anualmente, si la organización está dirigida por voluntarios, empleados, contratistas independientes o una combinación de ellos y la forma en cómo se llegó a conocer Community Initiatives.\n¿Cómo es el proceso de solicitud?   Luego de enviar el formulario de consulta el Vicepresidente de Servicios al Cliente de Community Initiatives se pondrá en contacto con nosotros para realizar una llamada telefónica de presentación. En esta conversación conocerán nuestro proyecto y determinarán si podemos aplicar.\n  Si al terminar la llamada telefónica deciden que podemos solicitar el patrocinio fiscal, debemos presentar una solicitud y la documentación de apoyo para completar el proceso.\n  Las solicitudes completas incluyen los siguientes documentos requeridos:\n  Carta de presentación solicitando el patrocinio fiscal.\n  Formulario de solicitud de cuatro páginas.\n  Presupuesto del primer año (se requiere la plantilla de Community Initiatives).\n  Plan de recaudación de fondos a tres años.\n  Biografía y curriculum vitae del Director Ejecutivo.\n  Biografías de los miembros del Comité Asesor.\n  Material adicional del programa (opcional).\n  Las solicitudes se aceptan trimestralmente. Los plazos de solicitud trimestral para este año:\n  7 de enero\n  8 de abril\n  17 de junio\n  23 de septiembre\n   Posteriormente el personal de Community Initiatives programará una reunión para comprender mejor las necesidades operativas del proyecto y realizar una evaluación de riesgos de las actividades propuestas. Será de 45 o 90 minutos de acuerdo al tipo o modelo de solicitud considerada (A o C).\n  La Junta directiva de Community Initiatives debe aprobar la solicitud antes de que el proyecto se incorpore a su amplia red. El estado de la solicitud erá notificado en el plazo de una semana tras la revisión de la junta.\n  Si aceptan la solicitud, se celebrará una reunión de orientación para ayudarnos a sacar el máximo provecho de la asociación con Community Initiatives; allí seleccionan una fecha de inicio que nos convenga. Si el proyecto es aprobado, se debe realizar la inscripción en cualquier momento en el plazo de un año desde la aceptación del proyecto. Los proyectos seleccionados deben comenzar su labor en el plazo de un año a partir de la aprobación de la junta directiva.\n  ¿Qué servicios nos brinda Community Initiatives? Community Initiatives proporciona una administración completa en las áreas más intensivas en tiempo y experiencia de la gestión sin ánimo de lucro, desde recursos humanos, administración de nóminas, preparación y presentación de impuestos, gestión financiera y más. Con Community Initiatives el 90% de nuestros ingresos quedarían en el personal y los programas.\nEspecíficamente los servicios que ofrece son:\n  Manejo de beneficios, nóminas y recursos humanos entre ellos un manual de personal actualizado, sistemas de contratación establecidos, plan para la asistencia sanitaria de los empleados y otras prestaciones, administración de las nóminas de los empleados y contratistas y expertos de guardia para gestionar los problemas de recursos humanos.\n  Administración del empleo, cartas de oferta de trabajo y autorizaciones de visado para empleados, ajustes salariales, ascensos, cambios de título, aclaración de la FLSA, permisos de ausencia, etc. Revisión de causas de despido, acuerdos de pago final, entrevistas de salida, despidos, reducciones salariales, etc. Procesamiento de cheques, W-9s, 1099s y mantenimiento de la información I-9.\n  Administración de beneficios: planes de salud y bienestar de los empleados, administración de planes de jubilación a través de nuestro 401(k), administración de cuentas de gastos flexibles y administración de COBRA\n  Gestión de riesgos y cumplimiento: mantenimiento de los registros y la documentación del personal, cumplimiento normativo (ERISA, FLSA, EEO y otras normativas federales y estatales), gestión de riesgos de RR.HH. para la compensación de los trabajadores y el seguro de desempleo, formación relacionada con el cumplimiento para los directores y gerentes de proyectos (EEO, acoso sexual, etc.), plantillas de contratistas independientes y su cumplimiento.\n  Políticas de RRHH y relaciones con los empleados: entrenamiento para la gestión del rendimiento, manual del empleado completo, asesoramiento en materia de relaciones con los empleados, resolución de conflictos, gestión y administración de reclamaciones y mediación.\n    Gestión financiera: cuentas por pagar, cobros en efectivo, estados financieros mensuales, informes y análisis financieros, gestión del presupuesto y de la tesorería, auditoría anual independiente e informes de cumplimiento y asesoramiento financiero.\n  Preparación y cumplimiento de impuestos: declaraciones fiscales e informativas federales, estatales y locales; recepción de donaciones y subvenciones deducibles de impuestos, acuse de recibo de donaciones superiores a 250 dólares, como exige el IRS; remisión y presentación de impuestos sobre la nómina, licencias comerciales estatales y locales.\n  Apoyo a las subvenciones: colaboración en el desarrollo de solicitudes, revisión de borradores de propuestas, seguimiento financiero de los fondos de la subvención, control del cumplimiento de las subvenciones, seguimiento y apoyo a los informes de las subvenciones.\n  Gestión de riesgos y seguros: Community Initiatives ofrece la siguiente protección a todos sus proyectos patrocinados fiscalmente: Indemnización laboral Responsabilidad civil general Responsabilidad civil general Propiedad comercial Automóviles propios y alquilados Accidente Responsabilidad civil por prácticas laborales Responsabilidad civil por delitos y robos de empleados\n  Asesoramiento jurídico. Community Initiatives ofrece acceso a expertos legales en las siguientes áreas: marca comercial, propiedad intelectual, demandas por discriminación, propiedad inmobiliaria, empleo y discriminación, prórrogas del visado H-1 B, impuesto sobre la renta de las empresas no relacionadas y acuerdos de asociación. Cuando el proyecto requiera un apoyo legal altamente especializado o intensivo, Community Initiatives cuenta con un experto legal a un precio reducido.\n  Coaching: los proyectos de Community Initiatives cuentan con un profundo banco de especialistas en organizaciones no lucrativas junto con expertos en consultoría para ayudar, entre otros, con temas relacionados con el marketing y las comunicaciones, la consultoría estratégica, la recaudación de fondos, la participación de la junta directiva y los voluntarios y otras cosas más.\n  Gestión de donaciones y crowdfunding: Cuando llegan las donaciones, Community Initiatives se asegura de que cada contribución de 250 dólares o más reciba una carta de reconocimiento del donante que cumpla con los requisitos fiscales. Se asocia con FundRazr una plataforma de recaudación de fondos online de vanguardia. A través de este acuerdo de colaboración, los proyectos de Community Initiatives tienen acceso gratuito a una plataforma de donaciones personalizable con las siguientes características: crowdfunding, baja tasa de tramitación, investigación de donantes, informes de donaciones, sitio de donaciones de marca blanca (por una tarifa nominal), a través de la asociación con WeDidIt, se obtiene la financiación rápidamente.\n  ¿Cuáles son las tasas de cobro de Community Initiatives?   Cuotas de patrocinio: Community Initiatives cobra el 10% de los ingresos brutos. Debido a la complejidad de los requisitos de información, cobra un 15% para los fondos gubernamentales.\n  Recaudación de fondos mínima: aunque sirven a un número de proyectos con presupuestos anuales millonarios, todos los proyectos de la red deben cumplir con un requisito mínimo de recaudación de fondos anual de 24.000 dólares.\n  ","link":"https://osl-hugo.github.io/guidelines/fund-raiser/guide-es/","section":"guidelines","tags":null,"title":"Guía para Recaudación de Fondos"},{"body":"","link":"https://osl-hugo.github.io/tags/mentoria/","section":"tags","tags":null,"title":"mentoria"},{"body":"Una gráfica es una buena manera de expresar los datos, estos ayudan a ver detalles que simplemente pueden pasar desapercibidos cuando sólo se los analizan numericamente, estos pueden tener aún mayor impacto si estan animados. ¿Por qué no hacerlo?. En este artículo se describe como hacer animación usando ggplot2 y gganimate en R.\nComenzando Usamos R por ser un lenguaje especializado para ciencia de datos y tener una gran Comunidad Open Source. Antes de comenzar recomendamos tener las versiones actualizadas de R y su IDE RStudio.\nPuedes descargar R y RStudio desde sus páginas web oficiales:\ncran.r-project.org\nrstudio.org\nInstalación de pre-requisitos Para este ejemplo usamos las bibliotecas de rio, dplyr, ggplot2 y gganimate. Las instalamos con los siguientes comandos en R (Recuerde que para ejecutar una linea de Comando en el Editor de RStudio Es con Ctrl+Enter o puede escribirlo directamento en la Consola)\n1install.package(rio) # Biblioteca para importar archivos csv o xlsx 2install.package(dplyr) # Biblioteca para filtrar datos 3install.package(ggplot2) # Biblioteca para realizar las gráficas 4install.package(gganimate) # Biblioteca para realizar la animación Preparación de los datos para graficar Los datos usados pertenecen a la base de datos del INE (Instituto Nacional de Estadística Bolivia), el archivo usado tiene el nombre de \u0026quot;Importaciones de Productos y Artículos de Bolivia 1992-2021p\u0026quot;\nAbrimos nuestras bibliotecas:\n1library(rio) 2library(ggplot2) 3library(gganimate) 4library(dplyr) Importamos los datos a un objeto llamado libro con:\n1libro \u0026lt;- import(\u0026#34;.my/path/DatosImportacionBolivia1992-2021.csv\u0026#34;) Para ver la cabecera del libro, y para ver la estructura del libro ejecutamos respectivamente head(libro) y  str(libro).\n1\u0026gt; head(libro) 2 Fecha ALIMENTOS Y BEBIDAS SUMINISTROS INDUSTRIALES COMBUSTIBLES Y LUBRICANTES 31 1992-01-01 12.686477 30.38827 1.738607 42 1992-02-01 9.139570 32.57593 1.822906 53 1992-03-01 6.150201 21.37546 2.000110 64 1992-04-01 9.225652 28.34524 1.455245 75 1992-05-01 14.503611 22.06801 2.168646 86 1992-06-01 5.875804 25.43617 3.084602 9 BIENES DE CAPITAL EQUIPO DE TRANSPORTE Y SUS PIEZAS Y ACCESORIOS ARTÍCULOS DE CONSUMO 101 25.66374 22.20454 5.585219 112 22.00027 18.68626 6.528652 123 22.92478 17.40578 6.196415 134 31.14429 16.77957 5.422824 145 26.82719 22.79343 5.458318 156 23.47011 16.00698 5.647866_ 16 1\u0026gt; str(libro) 2\u0026#39;data.frame\u0026#39;:\t358 obs. of 7 variables: 3 $ Fecha : IDate, format: \u0026#34;1992-01-01\u0026#34; \u0026#34;1992-02-01\u0026#34; ... 4 $ ALIMENTOS Y BEBIDAS : num 12.69 9.14 6.15 9.23 14.5 ... 5 $ SUMINISTROS INDUSTRIALES : num 30.4 32.6 21.4 28.3 22.1 ... 6 $ COMBUSTIBLES Y LUBRICANTES : num 1.74 1.82 2 1.46 2.17 ... 7 $ BIENES DE CAPITAL : num 25.7 22 22.9 31.1 26.8 ... 8 $ EQUIPO DE TRANSPORTE Y SUS PIEZAS Y ACCESORIOS: num 22.2 18.7 17.4 16.8 22.8 ... 9 $ ARTÍCULOS DE CONSUMO : num 5.59 6.53 6.2 5.42 5.46 ... Es importante verificar el tipo de dato, antes de graficar, en este caso nos importa que la fecha tenga formato de IDate y los demás sean tengan formato de num. En caso de que la fecha no tenga formato IDate puedo tranformar la columna usando la el comando columna\u0026lt;-as.Date(columna).\nCon las siguientes líneas de código, compactamos el número de columnas de nuestro libro en un nuevo objeto llamado datos. (Notese que solamente utilizaremos las primeras 4 columnas del objeto libro). Es decir una columna para la fecha, una columna para su valor y otra columna que muestre su clasificación.\n1# Simplificando nuestra tabla para realizar las gráficas 2# Cuando se escribe el nombre del objeto libro$.. en RStudio el autocomplado con los nombres de la columnas del libro 3datos \u0026lt;- 4 data.frame( 5 Fecha = c(libro$Fecha, libro$Fecha, libro$Fecha, libro$Fecha), 6 Valor = c( 7 libro$`ALIMENTOS Y BEBIDAS`, 8 libro$`SUMINISTROS INDUSTRIALES`, 9 libro$`COMBUSTIBLES Y LUBRICANTES`, 10 libro$`EQUIPO DE TRANSPORTE Y SUS PIEZAS Y ACCESORIOS` 11 ), 12 Clasificacion = c( 13 rep(\u0026#34;Alimentos y Bebidas\u0026#34;, nrow(libro)), 14 rep(\u0026#34;Suministros Industriales\u0026#34;, nrow(libro)), 15 rep(\u0026#34;Combustibles y Lubricantes\u0026#34;, nrow(libro)), 16 rep(\u0026#34;Equipo de Transporte\u0026#34;, nrow(libro) 17 ) Funciones auxiliares usadas:\n  libro$columna: para acceder al columna del libro.\n  data.frame(columna1, columna2 ...): para crear una nuevo objeto de Datos.\n  c(elemento1, elemento2, ...): para juntar elementos en un vector.\n  rep(elemento, n_veces): para generar un vector con el elemento repetido n_veces.\n  nrow(tabla): para obtener el número de filas de tabla.\n  Observemos la cabecera de datos para verificar, con head(datos) :\n1\u0026gt; head(datos) 2 Fecha Valor Clasificacion 31 2018-01-01 56.34888 Alimentos y Bebidas 42 2018-02-01 47.42231 Alimentos y Bebidas 53 2018-03-01 59.54501 Alimentos y Bebidas 64 2018-04-01 56.08808 Alimentos y Bebidas 75 2018-05-01 51.86330 Alimentos y Bebidas 86 2018-06-01 43.84668 Alimentos y Bebidas Gráfica estática Para graficar con ggplot2, es conveniente entender que esta biblioteca añade sus componentes en layers (capas), estos layers son objetos a los cuales se le puede modificar su apariencia y especificar de donde extraer sus valores.\nAsignamos a un objeto ggplot llamado p1 lo que vamos a graficar:\n1# Modificando el theme a uno con el fondo blanco 2theme_set(theme_bw()) 3 4p1 \u0026lt;- ggplot(data = datos) + 5 geom_line(aes(x = Fecha, y = Valor, color = Clasificacion), size = 0.5) + 6 theme(legend.position = \u0026#34;right\u0026#34;) + 7 labs( 8 x = \u0026#34;Fecha\u0026#34;, 9 y = \u0026#34;Valor en MM Bs\u0026#34;, 10 color = \u0026#34;\u0026#34;, 11 title = \u0026#34;Datos de Importación de Bolivia 1991-2021p\u0026#34;, 12 subtitle = \u0026#34;Expresado en Millones de Bolivianos\u0026#34; 13 ) 14p1 15 Funciones utilizadas\n  theme_set(theme_bw()): modifica el conjunto de colores usado en el tema para realizar la gráfica.\n  ggplot(data): esta es la primera capa a utilizarse inicialmente le asignamos nuestos datos data para que cree las dimensiones de las coordenadas y esta se herede a las otras capas.\n  geom_line(aes(x, y, color), size): capa que hereda los datos de ggplot(), se los puede usar directamente con el nombre de sus columnas, grafica los datos x e y como líneas, las clasifica de acuerdo al color y size determina el grosor de sus líneas.\n  theme(legend.position): capa que modifica la posición de la leyenda dentro gráfico, con legend.position, esta puede adquirir valores de top, left, etc.\n  labs(x, y, color, title, subtitle): capa que pone los nombres a eje x y al eje y, además de poner el nombre encima de las leyendas con color, el nombre título y subtítulo con title y subtitle respectivamente.\n       Gráfica Animada Ya teniendo nuestra nuestra gráfica estática, vamos a realizar algunas modificaciones para que se resalten los datos de nuestro interés.\nFiltrando datos con fecha mayor al año 2019.\n1datos \u0026lt;- filter(datos, datos$Fecha \u0026gt;= as.Date(\u0026#34;2019-01-01\u0026#34;))   filter(datos, condicion): evalua cada fila de datos y filtra de acuerdo a la condicion.\n  as.Date(var) convierte var a un formato de fecha IDate\n  Agregando un nuevo data frame periodos para resaltar las fechas de confinamiento por Covid19.\n1periodos \u0026lt;- 2 data.frame( 3 xmin = as.Date(\u0026#34;2020-03-22\u0026#34;), 4 xmax = as.Date(\u0026#34;2020-08-31\u0026#34;), 5 ymin = -Inf, 6 ymax = Inf, 7 Periodo = \u0026#34;Confinamiento por COVID19\u0026#34; 8 ) Creando un nuevo objeto ggplot2 p2 para incluir las nuevas modificaciones.\n1p2 \u0026lt;- ggplot(data = datos) + 2 geom_line(aes(x = Fecha, y = Valor, color = Clasificacion), size = 1) + 3 geom_rect( 4 data = periodos, 5 alpha = 0.2, 6 aes( 7 xmin = xmin, 8 xmax = xmax, 9 ymin = ymin, 10 ymax = ymax, 11 fill = Periodo 12 ) 13 ) + 14 theme(legend.position = \u0026#34;right\u0026#34;) + 15 labs( 16 x = \u0026#34;Fecha\u0026#34;, 17 y = \u0026#34;Valor en MM Bs\u0026#34;, 18 color = \u0026#34;\u0026#34; , 19 fill = \u0026#34;\u0026#34;, 20 title = \u0026#34;Datos de Importación Bolivia 2019-2021p\u0026#34;, 21 subtitle = \u0026#34;Expresado en Millones de Bolivianos\u0026#34; 22 ) 23p2   geom_rect(data, alpha, aes(xmin, xmax, ymin, ymax, fill)): dibuja un rectangulo a partir de los datos en Data, modifica su opacidad de acuerdo a alpha, extrae los datos de acuerdo a xmin, xmax, ymin, ymax, y los clasifica de acuerdo a fill.\n  lab(fill): pone el nombre encima de la leyenda de los datos clasificados con fill.\n  Con las modificaciones ya hechas en p2, creamos el objeto gganimate llamado anim el cuál contendrá nuestra grafico a animar.\n1anim \u0026lt;- p2 + transition_reveal(Fecha) + 2 geom_label(aes( 3 x = as.Date(\u0026#34;2019-06-01\u0026#34;), 4 y = 280, 5 label = format(datos$Fecha, \u0026#34;%Y\u0026#34;) 6 ), 7 col = \u0026#34;gray\u0026#34;, 8 size = 15)   transition_reveal(var): añade la capa de animacion del tipo transición usando como referencia la variable var.\n  geom_label((aes(x,y,label)) col, size): añade la capa de etiquetas del año dentro de la gráfica, con aes(x, y, label): x e y son las coordenadas donde se grafica la etiqueta label, con col seleccionamos un color y con size el tamaño.\n  Nota: geom_label() fué diseñado para graficar etiquetas que acompañen a la gráfica. En este ejemplo en específico fué usado como una etiqueta estática fijando sus coordenadas x e y en un sólo punto. Se optó por esta opción ya que genera un buen impacto visual.\nCon el objeto anim creado podemos invocar la función animate() de gganimate. Una vez ejecutada la función se abrirá una ventana con el resultado en formato .gif.\n1animate( 2 anim, 3 fps = 25, 4 duration = 15, 5 width = 800, 6 height = 500, 7 end_pause = 30 8)   animate(anim, fps, duration, width, height, end_pause): animate() funcion para generar la animación, anim objeto a animarse, fps cantidad de frames por segundo, duration duración de la animación en segundos, with, height ancho y alto de la animación respectivamente en pixeles, end_pause cantidad de veces a repetirse el último frame para la animación.  Hay casos en los que extrañamente no se instalan los renders para hacer la renderización de la animación y aparece un error al tratar de ejecutar el código arriba mostrado, en ese caso puede probar con la siguiente solución: Ejecute en modo administrador RStudio e instale los renders con install.packages(\u0026quot;gifski\u0026quot;) para el render que viene por defecto con gganimate, tambien puede instalar el render magick con install.packages(\u0026quot;magick\u0026quot;) para tener otra opción para renderizar. Para saber que opciones tiene el render magick ejecute help(\u0026quot;magick_renderer\u0026quot;) y se le mostrara su breve manual.\n     Despues de ver la animación podemos guardarla haciendo:\n1archivo \u0026lt;- 2 animate( 3 anim, 4 fps = 25, 5 duration = 15, 6 width = 800, 7 height = 500, 8 end_pause = 30 9 ) 10 11anim_save(filename = \u0026#34;datosimportpandemia.gif\u0026#34;, 12 animation = archivo, 13 path = \u0026#34;.my/path/save/\u0026#34;) anim_save(filename, animation, path): guarda el renderizado de animation con el nombre filename en la ruta path.\nReferencias   Instituto Nacional de Estadística Bolivia\n  Documentacion de R\n   ","link":"https://osl-hugo.github.io/blog/visualiza-tus-datos-en-r-con-ggplot-y-gganimate/","section":"blog","tags":["r","visualización de datos"],"title":"Visualiza tus datos en R con ggplot2 y gganimate"},{"body":"Open science labs is a community that aims to gather people from all parts of the world, specially from latin america countries and create an open space for teaching, learning and sharing topics around open science and computational tools. An english group is very important in this context because it increases the possibilities of collaboration in open projects.\nComunity We are using discord to organize our community. There you can decide which group you want to join, for example python, c++, compilers, open science, devops, languages (English, Spanish) , etc.\nAlso, everyone is more than welcome to propose a study-group. If you want to study a specific topic, and want to gather more people to study that with you, we encourage you to propose a study-group.\nIf you want to give a talk or tutorial about a specific topic, raise your voice in the channel #comm-general and we will be more than happy to help you to hold this event on discord.\nCollaborate! If you want to join us, apply to be a volunteer here.\nAlso, take a look into our Code of Conduct.\nWe need help in areas, such as:\n DevOps Articles Videos Community Management Social Media Diversity, Equity and Inclusion Events Documentation Mentoring Project Managements  Join our community on discord. Learn more and contribute on GitHub.\nRoadmap If you are interested in the Open Science Labs next steps, please check our Roadmap.\nGovernance For more information about our project governance, please check governance document.\n","link":"https://osl-hugo.github.io/about/","section":"","tags":null,"title":"About"},{"body":"Pycafe charlas           DevOps Charlas   Anuncios de eventos https://twitter.com/opensciencelabs/status/1570867241138245633?s=20\u0026amp;t=UjgCpGqlFdXKkZWXfVNP_g Si quieres conocer más sobre Jupyter Notebook, lee nuestro blog 👉 https://t.co/Wz9yKHSJch pic.twitter.com/fJcc9oknzi\n\u0026mdash; OpenScienceLabs (@opensciencelabs) September 16, 2022  ","link":"https://osl-hugo.github.io/archives/","section":"","tags":null,"title":""},{"body":"¿Qué es OpenScienceLabs (OSL)? Open Science Labs es una comunidad que tiene como objetivo unir a personas de todas partes del mundo, especialmente de países latinoamericanos y crear un espacio abierto para enseñar, aprender y compartir temas relacionados con la ciencia abierta y las herramientas computacionales.\n¿Qué actividades realizan? Creamos y contribuimos a la comunidad OpenSource enfocada en Ciencia Abierta, creando artículos sobre herramientas para la Ciencia Abierta, Proyectos en DevOps, Ciencia de Datos y Open Hardware. También disponemos de espacios de intercambio de información a través de Discord y desarrollamos procesos de Mentorías y capacitaciones específicas, favoreciendo la adquisición de nuevas destrezas en quienes nos contactan.\n¿Quienes componen OpenScienceLabs? En la comunidad estan varias personas curiosas con diferentes profesiones y que realizan diversas actividades y que colaboran de forma voluntaria. Algunas de las profesiones de quienes conforman OpenScienceLabs son: destrezas técnicas en electricidad, ingeniería ambiental, fullStack developers, ciencias políticas e ingeniería informática ubicadas todas en diferentes partes de Latinoamérica.\n¿Cómo puedo aportar a la comunidad?  Puedes llenar el formulario para que nosotros te podamos contactar y coordinar una videollamada para coordinar actividades. click aquí O también puedes solicitar que tu aporte como artículo, o código fuente se comparta las redes sociales de la comunidad o el repositorio, a través de Discord. Una vez tu aporte sea incorporado se será de Código Abierto con licencia tipo CC BY-SA 4.0 y se agregará tu nombre a la lista de quienes Contribuyen con OpenScienceLabs.  ¿Tienen mentorías? Si, para hacerte un mentorado de OSL sólo llena este formulario y te avisaremos a la brevedad notificándote si tenemos un tutor disponible. También puedes ser tutor o mentor llena este otro formulario de aquí.\n¿Qué actividades específicas están haciendo actualmente? En OpenScienceLabs estamos trabajando en:\n Puesta en marcha y mantenimiento de nuestra págína web. Mentorías en DevOps. Guias de herramientas para R y otras herramientas de uso frecuente en Ciencia Abierta. Creación de artículos en tecnologías emergentes y Ciencia Abierta. Manejo de redes sociales.  ¿Les están pagando algo? No, la comunidad se mantiene gracias al voluntariado que aporta su tiempo libre a la comunidad. Aunque está entre nuestros planes conseguir apoyos para el sostenimiento de nuestra labor.\nTengo algunas sugerencias. ¿Cómo me contacto con OSL? Puedes hacerlo a traves de Discord, casi siempre esta un administrador que pueda responderte. Discord Group\n¿Quienes dirigen OSL? Tenemos un directorio llamado Board, el cúal se reune semanalmete para fijar actividades y metas para la comunidad.\n¿Que tipo de licencia tiene OpenScienceLabs? Todo lo que compartimos esta bajo la Licencia CC BY-SA 4.0, es decir que puedes compartir, redistribuir, transformar el material siempre que: se dé el apropiado credito del autor y que si los transformas se debe distribuir bajo la misma licencia. Para más detalles sobre la licencia puedes visitar la página web de Creative Commons Attribution-ShareAlike 4.0 Internacional.\n¿Cuál es su motivación para aportar a la comunidad Open Source? Creemos que la educación y la tecnología debería ser lo más accesible posible para todos. Y para lograrlo, ¡juntar esfuerzos OpenScienceLabs es un buen lugar!\n","link":"https://osl-hugo.github.io/faq/","section":"","tags":null,"title":""},{"body":"  Open Science Labs Partners  /* * { border: solid blue 1px; } */ .alertadengue{ /* width: 150px; */ height: auto; } .epigraphhub { /* width: 200px; */ height: auto; } .arxlang { /* width: 100px; */ height: 100px; } .pyopensci { /* width: 120px; */ height: auto; } .card-columns { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 15px; padding: 10px; } .card{ padding: 10px; }   OSL is a Open-Source community and everyone can join, check our GitHub to be apart of the issues. Partners  AlertaDengue InfoDengue is an early-warning system to all states of Brazil, the system is based on the continuous analysis of hybrid data generated through the research of climate and epidemiological data and social scraping.\n\n   EpiGraphHub Health Data Hub \u0026amp; Data Analysis Ecosystem for Rapid Epidemic Outbreak Response.\n\n   ArxLang Arx compiler aims to provide arrow datatypes as native datatypes.\n\n   pyOpenSci pyOpenSci promotes open and reproducible research through peer-review of scientific Python packages.\n \n  PyDataStructs A Python package for data structures and algorithms.\n\n   .alertadengue{ max-width: 150px; height: auto; } .epigraphhub { max-width: 200px; height: auto; } .arxlang { max-width: 100px; height: 100px; } .pyopensci { max-width: 120px; height: auto; }  ","link":"https://osl-hugo.github.io/partners/","section":"","tags":null,"title":""},{"body":"  .card-columns { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 15px; padding: 10px; } .card{ padding: 10px; }  OSL is a Open-Source community and everyone can join, check our GitHub to be apart of the issues. How can I contribute? To be contributing with the community you must know our Guidelines, there you will find the workflow of the running projects and how you can apply to our team. Board Ivan Ogasawara Enthusiast of Compilers, Data Science and Open Science. Experience with Python, C++, Javascript, DevOps and Packaging.   Eunice Rodas I’m currently working on Beek.io as Data Engineer, I work create and model, ETL, pipelines and Datawarehouse usuing Python, Pandas, Airflow and GCP. I'm data passionate, I studied a postgraduate in Data Predict and Analytics using Pandas, Tensorflow and R.   Ever Vino Environmental Engineer with experience in Research, chemical analysis, development of mathematical models for Bioprocesses, design of wastewater treatment systems.   Luis Gago Casas CEO and Owner at AyPhu    Contributors Alan Hurtarte Full stack developer and tech lover, with over 6 years of experience. Always learning. Currently, I work as a Lead full stack developer at My Postcard   Luã Bida Vacaro Software Developer and DevOps   Sandro Loch Web developer with experience with Python, Docker, Conda and Django; Also, he have contributed to opensource projects.   Mariangela Petrizzo Political scientist by formation, mayeutic by conviction. Looking for a new ways for open knowledge survival in a world plenty of selfishness.   Ariel Silvio Norberto Ramos Programmer, Developer, Teach Technology, Organizer, Logistic.   Ingrid Garcia Research Coordinator at 60 Decibels.   Francisco Palm Computation \u0026 Data Science Senior Researcher, Python \u0026 R Developer and Software Architect. Special emphasis on hacker ethic as a learning strategy, use of conceptual and mathematical models for decision-making, geomatics and spatial analysis, all these areas focused on Distributed Massive Empowerment.   Anavelyz Pérez Statistician, data analyst. Python and R learner.   Yurely Camacho Statistician, data analyst. Python and R learner   Jasmeet Singh   Gretzel Uriona Comunicación y Gestión de Proyectos    Mentoring TBD. -- MI NOMBRE \n   -- ","link":"https://osl-hugo.github.io/team/","section":"","tags":null,"title":""},{"body":"","link":"https://osl-hugo.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://osl-hugo.github.io/series/","section":"series","tags":null,"title":"Series"}]